{"meta":{"version":1,"warehouse":"1.0.3"},"models":{"Asset":[{"_id":"themes/yilia/source/js/pc.js","path":"js/pc.js","modified":1},{"_id":"themes/yilia/source/js/mobile.js","path":"js/mobile.js","modified":1},{"_id":"themes/yilia/source/js/main.js","path":"js/main.js","modified":1},{"_id":"themes/yilia/source/js/jquery.lazyload.js","path":"js/jquery.lazyload.js","modified":1},{"_id":"themes/yilia/source/js/instagram.js","path":"js/instagram.js","modified":1},{"_id":"themes/yilia/source/img/zhihu.png","path":"img/zhihu.png","modified":1},{"_id":"themes/yilia/source/img/weibo.png","path":"img/weibo.png","modified":1},{"_id":"themes/yilia/source/img/twitter.png","path":"img/twitter.png","modified":1},{"_id":"source/images/avatar.jpg","path":"images/avatar.jpg","modified":1},{"_id":"themes/yilia/source/img/stackoverflow.png","path":"img/stackoverflow.png","modified":1},{"_id":"themes/yilia/source/img/scrollbar_arrow.png","path":"img/scrollbar_arrow.png","modified":1},{"_id":"themes/yilia/source/img/rss.png","path":"img/rss.png","modified":1},{"_id":"themes/yilia/source/img/pinterest.png","path":"img/pinterest.png","modified":1},{"_id":"themes/yilia/source/img/pinboard.png","path":"img/pinboard.png","modified":1},{"_id":"themes/yilia/source/img/mail.png","path":"img/mail.png","modified":1},{"_id":"themes/yilia/source/img/linkedin.png","path":"img/linkedin.png","modified":1},{"_id":"themes/yilia/source/img/img-loading.png","path":"img/img-loading.png","modified":1},{"_id":"themes/yilia/source/img/img-err.png","path":"img/img-err.png","modified":1},{"_id":"themes/yilia/source/img/google.png","path":"img/google.png","modified":1},{"_id":"themes/yilia/source/img/github.png","path":"img/github.png","modified":1},{"_id":"themes/yilia/source/img/facebook.png","path":"img/facebook.png","modified":1},{"_id":"themes/yilia/source/img/douban.png","path":"img/douban.png","modified":1},{"_id":"themes/yilia/source/img/delicious.png","path":"img/delicious.png","modified":1},{"_id":"themes/yilia/source/img/coderwall.png","path":"img/coderwall.png","modified":1},{"_id":"themes/yilia/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":1},{"_id":"themes/yilia/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":1},{"_id":"themes/yilia/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":1},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":1},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":1},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":1},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":1},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":1},{"_id":"themes/yilia/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":1},{"_id":"themes/yilia/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":1},{"_id":"themes/yilia/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":1},{"_id":"themes/yilia/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":1},{"_id":"themes/yilia/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":1},{"_id":"themes/yilia/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":1},{"_id":"themes/yilia/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":1},{"_id":"themes/yilia/source/css/style.styl","path":"css/style.styl","modified":1},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":1},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":1},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.svgz","path":"css/fonts/fontawesome-webfont.svgz","modified":1},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":1},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":1}],"Cache":[{"_id":"source/_posts/android-development-ocumentation.md","shasum":"44de0adc7f7fcc5273dab7288c8ad1c5f4713380","modified":1448398264000},{"_id":"source/_posts/android-gradle-summary.md","shasum":"d1df958433eba9b8266f7c63eda803f863ce0797","modified":1448866313000},{"_id":"source/_posts/mvp-file.md","shasum":"1e71635e1e8dff12ab2c58263facae70a295a2eb","modified":1448398290000},{"_id":"source/_posts/volley-used.md","shasum":"8f632b22d55cdf495613024eee6bd0d0a23dc70f","modified":1455908519000},{"_id":"source/about/index.md","shasum":"96bfb2ccdb52a755ce7aa465eba387c4ab338cf8","modified":1448438780000},{"_id":"source/categories/index.md","shasum":"b64efe11306ef1130524cbf8f47ed8bd746747fe","modified":1448397579000},{"_id":"source/tags/index.md","shasum":"8b048d56e1dcb3d57d2cf0231050fbe409ad7137","modified":1448397617000},{"_id":"source/images/avatar.jpg","shasum":"3da0271c14a466fac98c0c58b3cdcba0f6aad2c8","modified":1448396078000},{"_id":"themes/yilia/README.md","shasum":"8648a81b3ae08a4accd6b0541533e662511e6400","modified":1456482910000},{"_id":"themes/yilia/_config.yml","shasum":"d3c7dc7b5d6d34bb1a8d97624f610fcb4708a662","modified":1456482910000},{"_id":"themes/yilia/languages/de.yml","shasum":"ecb13af8af81ccc033ae7494cb2f94f84f6466ad","modified":1456482910000},{"_id":"themes/yilia/languages/default.yml","shasum":"9e59cd11b290be84909612beb12d0f93ce737f53","modified":1456482910000},{"_id":"themes/yilia/languages/en.yml","shasum":"8fa0a7482188ca56fd3cf19c4a87320f85a76846","modified":1456482910000},{"_id":"themes/yilia/languages/fr-FR.yml","shasum":"12cfa96dc412ecb6f8bf4de2690575929464906e","modified":1456482910000},{"_id":"themes/yilia/languages/ru.yml","shasum":"9997425292031ee8a58a93346ac6d3f38f18e566","modified":1456482910000},{"_id":"themes/yilia/languages/zh-Hans.yml","shasum":"0d7e8da60fd5e5db217e1733ac273ae00fd752ea","modified":1456482910000},{"_id":"themes/yilia/languages/zh-hk.yml","shasum":"606dfb34d3fec1d7895a654ff7a5a1de0c6a5c55","modified":1456482910000},{"_id":"themes/yilia/languages/zh-tw.yml","shasum":"9e4034870b57d2bb3063c91f8d206a6c4d7b3789","modified":1456482910000},{"_id":"themes/yilia/layout/_partial/after-footer.ejs","shasum":"082504c9fd8600306d4ca55f03e3cbb0ddd99dd7","modified":1456482910000},{"_id":"themes/yilia/layout/_partial/archive-post.ejs","shasum":"8dfb6d68aa8a0661d26c32ce1ce1f45815364c3a","modified":1456482910000},{"_id":"themes/yilia/layout/_partial/archive.ejs","shasum":"a6e94061ac55b9eb55275f87b608d62f6ea35659","modified":1456482910000},{"_id":"themes/yilia/layout/_partial/article.ejs","shasum":"d6306cd897683c25184a50b29931aa1fa18d119c","modified":1456482910000},{"_id":"themes/yilia/layout/_partial/footer.ejs","shasum":"f2994e0acd1d606ebf4680afc4fa652e148ccf4e","modified":1456482910000},{"_id":"themes/yilia/layout/_partial/google-analytics.ejs","shasum":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":1456482910000},{"_id":"themes/yilia/layout/_partial/head.ejs","shasum":"f7068535c0df7e7bc6614a046e7d4b262a65d8b2","modified":1456482910000},{"_id":"themes/yilia/layout/_partial/header.ejs","shasum":"6387a93dad7c3d778eb91e3821852fbf6813880c","modified":1456482910000},{"_id":"themes/yilia/layout/_partial/left-col.ejs","shasum":"47dc7c1d35928a7b026c683547f8482d2e524c63","modified":1456482910000},{"_id":"themes/yilia/layout/_partial/mathjax.ejs","shasum":"54fab4d3d64cb937d6baec7324ffabf9f202b883","modified":1456482910000},{"_id":"themes/yilia/layout/_partial/mobile-nav.ejs","shasum":"fff29e619af2b1abcab7d5d2d6f78428272f18f7","modified":1456482910000},{"_id":"themes/yilia/layout/_partial/post/category.ejs","shasum":"d4f0e36f9a2167e91082dbd7d52425a06d2bebbf","modified":1456482910000},{"_id":"themes/yilia/layout/_partial/post/date.ejs","shasum":"c0c988334e857a77ba455a056dfa21809e7e76a5","modified":1456482910000},{"_id":"themes/yilia/layout/_partial/post/duoshuo.ejs","shasum":"e8399025ed3b980aedb821c92855889f5f12fd5b","modified":1456482910000},{"_id":"themes/yilia/layout/_partial/post/nav.ejs","shasum":"d19dee2082528e1844bed3aa4e4bd59f15fd7a7a","modified":1456482910000},{"_id":"themes/yilia/layout/_partial/post/share_addthis.ejs","shasum":"0ac35bd92e58983c189ac0c35df404ebc6ee826e","modified":1456482910000},{"_id":"themes/yilia/layout/_partial/post/share_jia.ejs","shasum":"924744aa3c1bce9056ba03cec02e19e095009126","modified":1456482910000},{"_id":"themes/yilia/layout/_partial/post/tag.ejs","shasum":"78612cfc091d7d861a70455a0dc8c3036e460879","modified":1456482910000},{"_id":"themes/yilia/layout/_partial/post/title.ejs","shasum":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1456482910000},{"_id":"themes/yilia/layout/archive.ejs","shasum":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1456482910000},{"_id":"themes/yilia/layout/category.ejs","shasum":"765426a9c8236828dc34759e604cc2c52292835a","modified":1456482910000},{"_id":"themes/yilia/layout/index.ejs","shasum":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1456482910000},{"_id":"themes/yilia/layout/layout.ejs","shasum":"4a5566f704f3246f5ef77badddf18d2e16750328","modified":1456482910000},{"_id":"themes/yilia/layout/page.ejs","shasum":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1456482910000},{"_id":"themes/yilia/layout/post.ejs","shasum":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1456482910000},{"_id":"themes/yilia/layout/tag.ejs","shasum":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1456482910000},{"_id":"themes/yilia/package.json","shasum":"00357ef6f24eb049074da81809e98f973f528cca","modified":1456482910000},{"_id":"themes/yilia/source/css/_extend.styl","shasum":"8ab1ad313bd6707d248c5ca1ee9a5eab8d815e42","modified":1456482910000},{"_id":"themes/yilia/source/css/_partial/archive.styl","shasum":"8b349f1605024dcdae054e04f02d71a2e84957c2","modified":1456482910000},{"_id":"themes/yilia/source/css/_partial/article.styl","shasum":"872fc4e63509fef885c939e5fd70e6ed439beced","modified":1456482910000},{"_id":"themes/yilia/source/css/_partial/footer.styl","shasum":"7ca837a4cc34db1c35f01baec85eb10ccc64ea86","modified":1456482910000},{"_id":"themes/yilia/source/css/_partial/header.styl","shasum":"67e59feb18eee6026717cb440d86ab9551782628","modified":1456482910000},{"_id":"themes/yilia/source/css/_partial/highlight.styl","shasum":"08d3205dde3235f3e6881126268e6c473f46a8ac","modified":1456482910000},{"_id":"themes/yilia/source/css/_partial/instagram.styl","shasum":"8a7b07bf5ea2d3588c0019f722c245bb1a8696af","modified":1456482910000},{"_id":"themes/yilia/source/css/_partial/main.styl","shasum":"c368f1533053d4cffdf0ad982603271400b08e33","modified":1456482910000},{"_id":"themes/yilia/source/css/_partial/mobile-slider.styl","shasum":"e19c7fae6968ad3ea6cfc110900a991f9b5fce31","modified":1456482910000},{"_id":"themes/yilia/source/css/_partial/mobile.styl","shasum":"3a03b04ef8ac305aa5dbf7b9db99cd9377d07383","modified":1456482910000},{"_id":"themes/yilia/source/css/_partial/page.styl","shasum":"720b5b169bc28ccba3794efce9b7cd39f243dec7","modified":1456482910000},{"_id":"themes/yilia/source/css/_partial/scroll.styl","shasum":"5539a38f9acd603d453a0ea0d8ce10893cf83d22","modified":1456482910000},{"_id":"themes/yilia/source/css/_partial/share.styl","shasum":"22697b9a9877ab9f018364feb57aeea4a8313c9a","modified":1456482910000},{"_id":"themes/yilia/source/css/_partial/tagcloud.styl","shasum":"af0115de5c6455f899a2e09225b50224982c039d","modified":1456482910000},{"_id":"themes/yilia/source/css/_partial/wheelmenu.styl","shasum":"74630c56944e27bef53ef0c0e391611a2eec2ed0","modified":1456482910000},{"_id":"themes/yilia/source/css/_util/grid.styl","shasum":"1aa883ab432d9e4139c89dcbd40ae2bd1528d029","modified":1456482910000},{"_id":"themes/yilia/source/css/_util/mixin.styl","shasum":"429bad87fc156eacf226c5e35b0eafc277f2504b","modified":1456482910000},{"_id":"themes/yilia/source/css/_variables.styl","shasum":"8b63ea3c7199524b9a1541075c6f8fb2c0d0ea3d","modified":1456482910000},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.eot","shasum":"3ce87b82c7a4ffdf65e96765c2ffda10b1a283c6","modified":1456482910000},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.svgz","shasum":"4bfdd33ed702e32ae01399fcc2652377f78e7626","modified":1456482910000},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.ttf","shasum":"1480b8101b02da9bc4c60341b5e185e63e585064","modified":1456482910000},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.woff","shasum":"cafc4ac5761a0a252d33dce4ea3952cf9a38d832","modified":1456482910000},{"_id":"themes/yilia/source/css/style.styl","shasum":"456e8cfe3b0b0371e81848ea9b0bc7ffd5360921","modified":1456482910000},{"_id":"themes/yilia/source/fancybox/blank.gif","shasum":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1456482910000},{"_id":"themes/yilia/source/fancybox/fancybox_loading.gif","shasum":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1456482910000},{"_id":"themes/yilia/source/fancybox/fancybox_loading@2x.gif","shasum":"273b123496a42ba45c3416adb027cd99745058b0","modified":1456482910000},{"_id":"themes/yilia/source/fancybox/fancybox_overlay.png","shasum":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1456482910000},{"_id":"themes/yilia/source/fancybox/fancybox_sprite.png","shasum":"17df19f97628e77be09c352bf27425faea248251","modified":1456482910000},{"_id":"themes/yilia/source/fancybox/fancybox_sprite@2x.png","shasum":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1456482910000},{"_id":"themes/yilia/source/fancybox/helpers/fancybox_buttons.png","shasum":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1456482910000},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-buttons.css","shasum":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1456482910000},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-buttons.js","shasum":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1456482910000},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-media.js","shasum":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1456482910000},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-thumbs.css","shasum":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1456482910000},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-thumbs.js","shasum":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1456482910000},{"_id":"themes/yilia/source/fancybox/jquery.fancybox.css","shasum":"b6aa6692c2e5f8bd74d96827b78570f0c5683c20","modified":1456482910000},{"_id":"themes/yilia/source/fancybox/jquery.fancybox.js","shasum":"a82597493d75ea989ca586e09173cff332efe41e","modified":1456482910000},{"_id":"themes/yilia/source/fancybox/jquery.fancybox.pack.js","shasum":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1456482910000},{"_id":"themes/yilia/source/img/coderwall.png","shasum":"fa84676c4d654e040e51fd34bfcd9f9348cd5331","modified":1456482910000},{"_id":"themes/yilia/source/img/delicious.png","shasum":"9553a5f5189e4a953e04a58a49dbfa74b86b73dd","modified":1456482910000},{"_id":"themes/yilia/source/img/douban.png","shasum":"e2ade003ffadd5826ee66ec23901c2d6e8607e4e","modified":1456482910000},{"_id":"themes/yilia/source/img/facebook.png","shasum":"d19ad7a0903daf26817afd8753cd97e0cc714f54","modified":1456482910000},{"_id":"themes/yilia/source/img/github.png","shasum":"b84d03b32fa388dcbf149296ebd16dce6223d48d","modified":1456482910000},{"_id":"themes/yilia/source/img/google.png","shasum":"61a21fec7346fa3400b747ac9a201cf3d5bc013d","modified":1456482910000},{"_id":"themes/yilia/source/img/img-err.png","shasum":"23a63ea26eb3c1d5e677d9883cf36cc1a1a1228b","modified":1456482910000},{"_id":"themes/yilia/source/img/img-loading.png","shasum":"a9cd5cd11866824f31e3d1c5e23badfeb3f73031","modified":1456482910000},{"_id":"themes/yilia/source/img/linkedin.png","shasum":"e203138fb53c257cb214e97f4e30091b9c568d2c","modified":1456482910000},{"_id":"themes/yilia/source/img/mail.png","shasum":"fca8199cc77fdbd700a45bf56d091c82f4a67fe7","modified":1456482910000},{"_id":"themes/yilia/source/img/pinboard.png","shasum":"0891fbb6d092fa012bf936019923383d84c6aeb0","modified":1456482910000},{"_id":"themes/yilia/source/img/pinterest.png","shasum":"9c72917f8779c083157c6ce7a5d62ed4874f0630","modified":1456482910000},{"_id":"themes/yilia/source/img/rss.png","shasum":"430fd47340e75214c081abd05cd7410cf7c71b86","modified":1456482910000},{"_id":"themes/yilia/source/img/scrollbar_arrow.png","shasum":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1456482910000},{"_id":"themes/yilia/source/img/stackoverflow.png","shasum":"da5dfe9043055c95e479d49c78cd3b020de608f2","modified":1456482910000},{"_id":"themes/yilia/source/img/twitter.png","shasum":"14dbb8e62d056525253bc0de13acd1723da7a934","modified":1456482910000},{"_id":"themes/yilia/source/img/weibo.png","shasum":"280dae3fd38086158b4a1b57edb94c06b1a5014b","modified":1456482910000},{"_id":"themes/yilia/source/img/zhihu.png","shasum":"a6d6ef65e9ac82e613a311810391ebb90d9b1c1d","modified":1456482910000},{"_id":"themes/yilia/source/js/instagram.js","shasum":"81e13cacf4947118ed1920e59b04ccf6beef6b86","modified":1456482910000},{"_id":"themes/yilia/source/js/jquery.lazyload.js","shasum":"c11a2e7b330d16d06feabd0a8477099adf9d6799","modified":1456482910000},{"_id":"themes/yilia/source/js/main.js","shasum":"e2633f282e377a4169649c9f17dc96036ad4fc64","modified":1456482910000},{"_id":"themes/yilia/source/js/mobile.js","shasum":"b68cc01d24e80973c48205f551da87f3f3427644","modified":1456482910000},{"_id":"themes/yilia/source/js/pc.js","shasum":"a5397d34a04084ee089b4b1e26457ab46ecea63e","modified":1456482910000},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.svg","shasum":"ba13657479b46daecb6336bfe376f84cef3ae58b","modified":1456482910000},{"_id":"public/js/pc.js","modified":1456482989081,"shasum":"fdbc039fc9ffa70815b5fc4daaa587ae29693f10"},{"_id":"public/js/mobile.js","modified":1456482989085,"shasum":"b68cc01d24e80973c48205f551da87f3f3427644"},{"_id":"public/js/main.js","modified":1456482989087,"shasum":"0640b68a76fab3c693b3cd1e4d04d14be1e53940"},{"_id":"public/js/jquery.lazyload.js","modified":1456482989089,"shasum":"c11a2e7b330d16d06feabd0a8477099adf9d6799"},{"_id":"public/js/instagram.js","modified":1456482989091,"shasum":"f19adbcc0dac33536bc6660598059048ec901882"},{"_id":"public/img/zhihu.png","modified":1456482989097,"shasum":"a6d6ef65e9ac82e613a311810391ebb90d9b1c1d"},{"_id":"public/img/weibo.png","modified":1456482989100,"shasum":"280dae3fd38086158b4a1b57edb94c06b1a5014b"},{"_id":"public/img/twitter.png","modified":1456482989104,"shasum":"14dbb8e62d056525253bc0de13acd1723da7a934"},{"_id":"public/images/avatar.jpg","modified":1456482989108,"shasum":"3da0271c14a466fac98c0c58b3cdcba0f6aad2c8"},{"_id":"public/img/stackoverflow.png","modified":1456482989112,"shasum":"da5dfe9043055c95e479d49c78cd3b020de608f2"},{"_id":"public/img/scrollbar_arrow.png","modified":1456482989113,"shasum":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0"},{"_id":"public/img/rss.png","modified":1456482989116,"shasum":"430fd47340e75214c081abd05cd7410cf7c71b86"},{"_id":"public/img/pinterest.png","modified":1456482989119,"shasum":"9c72917f8779c083157c6ce7a5d62ed4874f0630"},{"_id":"public/img/pinboard.png","modified":1456482989120,"shasum":"0891fbb6d092fa012bf936019923383d84c6aeb0"},{"_id":"public/img/mail.png","modified":1456482989122,"shasum":"fca8199cc77fdbd700a45bf56d091c82f4a67fe7"},{"_id":"public/img/linkedin.png","modified":1456482989124,"shasum":"e203138fb53c257cb214e97f4e30091b9c568d2c"},{"_id":"public/img/img-loading.png","modified":1456482989125,"shasum":"a9cd5cd11866824f31e3d1c5e23badfeb3f73031"},{"_id":"public/img/img-err.png","modified":1456482989128,"shasum":"23a63ea26eb3c1d5e677d9883cf36cc1a1a1228b"},{"_id":"public/img/google.png","modified":1456482989130,"shasum":"61a21fec7346fa3400b747ac9a201cf3d5bc013d"},{"_id":"public/img/github.png","modified":1456482989132,"shasum":"b84d03b32fa388dcbf149296ebd16dce6223d48d"},{"_id":"public/img/facebook.png","modified":1456482989133,"shasum":"d19ad7a0903daf26817afd8753cd97e0cc714f54"},{"_id":"public/img/douban.png","modified":1456482989135,"shasum":"e2ade003ffadd5826ee66ec23901c2d6e8607e4e"},{"_id":"public/img/delicious.png","modified":1456482989138,"shasum":"9553a5f5189e4a953e04a58a49dbfa74b86b73dd"},{"_id":"public/img/coderwall.png","modified":1456482989140,"shasum":"fa84676c4d654e040e51fd34bfcd9f9348cd5331"},{"_id":"public/fancybox/jquery.fancybox.pack.js","modified":1456482989142,"shasum":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e"},{"_id":"public/fancybox/jquery.fancybox.js","modified":1456482989145,"shasum":"a82597493d75ea989ca586e09173cff332efe41e"},{"_id":"public/fancybox/jquery.fancybox.css","modified":1456482989146,"shasum":"b6aa6692c2e5f8bd74d96827b78570f0c5683c20"},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.js","modified":1456482989148,"shasum":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c"},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.css","modified":1456482989150,"shasum":"4ac329c16a5277592fc12a37cca3d72ca4ec292f"},{"_id":"public/fancybox/helpers/jquery.fancybox-media.js","modified":1456482989152,"shasum":"294420f9ff20f4e3584d212b0c262a00a96ecdb3"},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.js","modified":1456482989154,"shasum":"dc3645529a4bf72983a39fa34c1eb9146e082019"},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.css","modified":1456482989157,"shasum":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8"},{"_id":"public/fancybox/helpers/fancybox_buttons.png","modified":1456482989158,"shasum":"e385b139516c6813dcd64b8fc431c364ceafe5f3"},{"_id":"public/fancybox/fancybox_sprite@2x.png","modified":1456482989160,"shasum":"30c58913f327e28f466a00f4c1ac8001b560aed8"},{"_id":"public/fancybox/fancybox_sprite.png","modified":1456482989163,"shasum":"17df19f97628e77be09c352bf27425faea248251"},{"_id":"public/fancybox/fancybox_overlay.png","modified":1456482989166,"shasum":"b3a4ee645ba494f52840ef8412015ba0f465dbe0"},{"_id":"public/fancybox/fancybox_loading@2x.gif","modified":1456482989167,"shasum":"273b123496a42ba45c3416adb027cd99745058b0"},{"_id":"public/fancybox/fancybox_loading.gif","modified":1456482989169,"shasum":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c"},{"_id":"public/fancybox/blank.gif","modified":1456482989170,"shasum":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a"},{"_id":"public/css/style.css","modified":1456482989695,"shasum":"10e9b93cf935a165020e48334a40b84b0f895401"},{"_id":"public/css/fonts/fontawesome-webfont.woff","modified":1456482989861,"shasum":"cafc4ac5761a0a252d33dce4ea3952cf9a38d832"},{"_id":"public/css/fonts/fontawesome-webfont.ttf","modified":1456482989863,"shasum":"1480b8101b02da9bc4c60341b5e185e63e585064"},{"_id":"public/css/fonts/fontawesome-webfont.svgz","modified":1456482989865,"shasum":"4bfdd33ed702e32ae01399fcc2652377f78e7626"},{"_id":"public/css/fonts/fontawesome-webfont.svg","modified":1456482989867,"shasum":"ba13657479b46daecb6336bfe376f84cef3ae58b"},{"_id":"public/css/fonts/fontawesome-webfont.eot","modified":1456482989869,"shasum":"3ce87b82c7a4ffdf65e96765c2ffda10b1a283c6"},{"_id":"public/tags/index.html","modified":1456482989912,"shasum":"099902bebc762d948fad98f1a3d499c488734ed8"},{"_id":"public/categories/index.html","modified":1456482989920,"shasum":"19bd2fb5c8b7d876818ca67aa637b08a7c66aebb"},{"_id":"public/about/index.html","modified":1456482989930,"shasum":"d8d6e5eeabe0902161eeb3181e6fd0826dca7cb3"},{"_id":"public/2016/02/19/volley-used/index.html","modified":1456482989955,"shasum":"4b88c7896855cfb104e9937198568d9c4886815b"},{"_id":"public/2015/11/30/android-gradle-summary/index.html","modified":1456482989965,"shasum":"0c1416b3c87c0f6c815cd5d85a4f5e40a375ca9a"},{"_id":"public/2015/11/25/android-development-ocumentation/index.html","modified":1456482989975,"shasum":"debd6d700cc1c56a7f40e18cf1be7cea8f9d2875"},{"_id":"public/2015/11/24/mvp-file/index.html","modified":1456482989980,"shasum":"d45e20e53bf0bf0a64c952c8e79a43d98f7cc092"},{"_id":"public/archives/index.html","modified":1456482989990,"shasum":"00ecd3fa09897359d742d252a5dda34ff190ba6d"},{"_id":"public/archives/2015/index.html","modified":1456482989999,"shasum":"ebc1720723d4a65fbdf2f1f4151de7c17a0f981a"},{"_id":"public/archives/2015/11/index.html","modified":1456482990006,"shasum":"c50edbe7456573cca500376c3bf53fac7e5a30e0"},{"_id":"public/archives/2016/index.html","modified":1456482990011,"shasum":"f0a705635abfb55bc2cd9920dcfae4cf2cadc3ec"},{"_id":"public/archives/2016/02/index.html","modified":1456482990014,"shasum":"c9f0b66694b077856e7f425dd4161f94acf9a434"},{"_id":"public/categories/规范文档/index.html","modified":1456482990018,"shasum":"20b0e3724b9c861d6d134f7862496cf6cd73da02"},{"_id":"public/categories/android/index.html","modified":1456482990023,"shasum":"cbf1f9c4118166aaabb07def7516ed2c03baa465"},{"_id":"public/categories/MVP/index.html","modified":1456482990026,"shasum":"54fd260c2fb6791bb25ac9578f8e11b1905fab68"},{"_id":"public/index.html","modified":1456482990038,"shasum":"a74d6e54cbbdf938c7def62cdac487cfa63dac0f"},{"_id":"public/tags/开发文档/index.html","modified":1456482990047,"shasum":"60ce822c319a784d6479077c272ff5de93aea6bc"},{"_id":"public/tags/android/index.html","modified":1456482990052,"shasum":"cdafbc3375f495829a4de2f95dda90d4b50510ce"},{"_id":"public/tags/MVP/index.html","modified":1456482990055,"shasum":"3bb5a15efc68b5346bf85c78f2d0725a8e1c66f8"},{"_id":"public/tags/gradle/index.html","modified":1456482990061,"shasum":"e80174853b57d9d51456e9f6675804e2200f2f3f"}],"Category":[{"name":"规范文档","_id":"cil3kd5zx0001n86k6djjj2c8"},{"name":"android","_id":"cil3kd60h0009n86kong17boc"},{"name":"MVP","_id":"cil3kd60s000en86ksjdnwrtx"}],"Data":[],"Page":[{"title":"tags","date":"2015-11-24T20:18:27.000Z","type":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"title: tags\ndate: 2015-11-25 04:18:27\ntype: \"tags\"\ncomments: false\n---\n","updated":"2015-11-24T20:40:17.000Z","path":"tags/index.html","layout":"page","_id":"cil3kd6030005n86k42osp66m"},{"title":"分类","date":"2015-11-24T20:18:36.000Z","type":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"title: 分类\ndate: 2015-11-25 04:18:36\ntype: \"categories\"\ncomments: false\n---\n","updated":"2015-11-24T20:39:39.000Z","path":"categories/index.html","layout":"page","_id":"cil3kd6060006n86ko4f6muux"},{"title":"About me","date":"2015-11-24T20:37:35.000Z","type":"about","_content":"<img src=\"/images/avatar.jpg\" width = \"150\" height = \"200\" alt=\"It's me\" align=center />\n## NAME\nCN:钟山（zhongshan）EN:Bigkarel\n## INTRODUCTION\nandroid开发者\n## SKILL\n- 语言：Java / C\n- 技能：android开发技术","source":"about/index.md","raw":"title: About me\ndate: 2015-11-25 04:37:35\ntype: \"about\"\n---\n<img src=\"/images/avatar.jpg\" width = \"150\" height = \"200\" alt=\"It's me\" align=center />\n## NAME\nCN:钟山（zhongshan）EN:Bigkarel\n## INTRODUCTION\nandroid开发者\n## SKILL\n- 语言：Java / C\n- 技能：android开发技术","updated":"2015-11-25T08:06:20.000Z","path":"about/index.html","comments":1,"layout":"page","_id":"cil3kd60a0007n86krcm5x8wn"}],"Post":[{"title":"Android客户端开发文档","date":"2015-11-24T16:00:00.000Z","toc":true,"_content":"\n> version：1.0\n> 2015.11.12 \n> author：zhongshan\n\n## 开发环境规范\n- 开发工具：Android Studio\n- 编码：UTF-8\n- 代码格式化：Code Style –>  Right marging:120，选中Wrap when typing reaches right margin ；java Wrapping and Braces Keep when reformatting选项中全部取消勾选。其他默认。\n- 常用插件安装：Setting –>plugins\rAndroid BufferKnife Zelezny ：BufferKnife依赖注入代码自动生成。\rAndroid Parcelable code generator : 自动生成实现Parceable接口的代码\r。\n- JDK版本：jdk1.7\n\n<!--more-->\n\n## 项目规范：\n\n### 项目结构：\n\n\t- 主工程（app）\n\tcom.xxxx.  ——公司名+项目名（xxxx 公司项目同名）\n\t\t\t\tcommon. ——公共组件模块\n\t\t\t\t\t\tapi. ——公共API接口相关\n\t\t\t\t\t\t\tXXXConstants.java ——XXX常量\n\t\t\t\t\t\tbase. ——公共基类（Activity等）\n\t\t\t\t\t\thttp. ——网络请求基础\n\t\t\t\t\t\tmodel. ——公有数据结构\n\t\t\t\t\t\twedigets. ——自定义控件\n\t\t\t\t\t\tutils ——工具包\n\t\t\t\t\t\tpresenters ——MVP 表现层公共接口\n\t\t\t\t\t\tview\t—MVP 视图处理层公共接口\n\t\t\t\t\t\tinteractor  ——MVP 数据处理层公共接口\n\t\t\t\tXXXXX.\t——子模块名（n+）\r\t\t\t\t\t\tapi. ——模块API接口相关（请求、解析）\r\t\t\t\t\t\tmodel. ——模块相关数据结构\r\t\t\t\t\t\tactivitys. ——模块相关页面\r\t\t\t\t\t\tdb. ——数据库\n\t\t\t\t\t\tpresenters. ——MVP 控制处理层\n\t\t\t\t\t\t\timpl. ——实现类 \n\t\t\t\t\t\tview. ——MVP 视图处理层\n\t\t\t\t\t\tinteractor. ——MVP 数据处理层\n\t\t\t\t\t\t\timpl. ——实现类 \n\t\t\t\t\t\t\t\n\t- module工程（library）\n\t  \t\tcom.android.volley ——Volley源码\n\t \t\tcom.xxxx.library ——项目基础架构\r\n- Activity/Fragment继承结构：\r\t- 所有普通Activity继承BaseActivity\r\t- 所有Fragment继承BaseFragment\r\t- 所有需要边缘滑动退出的Activity继承BaseSwipeBackActivity\n\t\r---\n\r### 命名规范：\n> 遵循驼峰命名法 . 严禁使用拼音。命名要描述清楚，尽量不要简写。\n\n1. 类（class）\n\n\t\t名词，采用大驼峰命名法，尽量避免缩写\n\n\t类|描述|例如\n\t---|---|---\n\tactivity(Fragment) 类|Activity为后缀标识|知识详情页：KnowledgeDetialActivity\n\tAdapter类|Adapter 为后缀标识|搜索返回数据适配器：SearchResultAdapter\n\t解析类 \t |RespFactory为后缀标识\t| 知识模块解析类KnowledgeRespFactory\r\t公共方法类\t | Utils或Manager为后缀标识\t| 线程池管理类：ThreadPoolManager 日志工具类：\tStringUtils\r\t数据库类\t| 以DBHelper后缀标识\t |新闻数据库：NewDBHelper\r\tService类\t |以Service为后缀标识\t |时间服务TimeService\r\tBroadcastReceive类\t|  以Broadcast为后缀标识| 时间通知TimeBroadcast\r\tContentProvider  \t| 以Provider为后缀标识\r\t基础类\t |以Base开头\t|BaseActivity,BaseFragment\n\t\n2. 接口（interface）\n\n\t\t与类相同，大驼峰命名法\n3. 方法（methods）\n\n\t\t动词或动名词，采用小驼峰命名法\t\t\n4. 变量（variables）采用小驼峰命名法。\n   \n\t   \t- \t类中控件名称必须与xml布局id保持一致\r\t\t\t控件及其id命名：功能描述+控件单词首字母简写 \n\t\t\teg：用户头像控件：userAvatarIv\r\t\t- \t类中字段命名:\n\t\t\t(对象描述+集合名称)\r\t\t\tList<MeetingTopicQuery> meetingTopicQueryList\r\t\t\tString  username\r\t\t\tBoolean   isChanged\n\t\t\t(首字母小写，尽量避免缩写)\n\t\t\tMeetingTopicQuery meetingTopicQuery\n5. 常量（Constants\n\n\t\t全部大写，下划线命名法，如：IMAGE_LOADER_CACHE_PATH\n6. 资源文件命名\n\t\n\t\t-  全部小写，采用下划线命名法，加前缀区分\r\t\t-  命名模式：activity名称_逻辑名称/common_逻辑名称\r\t\t-  如果有多种形态如按钮等除外如btn_xx.xml（selector）\n\t\n7. 资源布局文件（XML文件/layout布局文件）\n\n\t\t全部小写，采用下划线命名法\r\t\t-  contentview命名, Activity默认布局，以去掉后缀的Activity类进行命名。\r\t\t   activity_功能模块.xml\r\t\t   例如：activity_main.xml、activity_more.xml\r\t\t-  Dialog命名：dialog_描述.xml\n\t\t\t例如：dialog _hint.xml\r\t\t-  PopupWindow命名：ppw_描述.xml\r\t       例如：ppw _info.xml\r\t\t-  列表项命名listitem_描述.xml\r\t\t   例如：listitem_city.xml   listitem_meeting.xml\r\t\t-  包含项：include_模块.xml\r\t\t   例如：include_head.xml、include_bottom.xml\r\r\t\r---\n\r### 注释规范\n> 要求在逻辑比较复杂的地方写清必要的注释。常量及变量的命名基本都需要有注释。\n\n1. 类（class）接口(interface)的注释\n\n\t\t在AndroidStudio中 按下面格式 修改File Header模板\n\t\t/**\n\t\t* Author：${USER}   \n\t\t* Date：${YEAR}/${MONTH}/${DAY} ${HOUR}:${MINUTE}      \n\t\t* Description：\n\t\t*/\n\t\tDescription中写清楚对此类的描述。\n2. 方法（method）的注释\n\t\n\t\t统一如下形式：\n\t\t/**\n\t    * 方法描述\n\t    * @param 参数1  参数1描述\n\t    * @param 参数2  参数2描述\n\t    */\n\t    \n3. 变量及常量的注释\n\t\n\t\t统一如下形式：\n\t\t/**姓名*/\n\t\tString name;\n\t\t好处是在任何一个调用它的地方，使用F1查就能查看到变量/常量注释\n4. 语句注释\n\t\t\n\t\t统一如下形式：\n\t\t// description\n\n\t\r---\n\n### 通用组件使用说明\n1. 常用类\n\n\t\t- 避免相同功能 的类或方法 重复添加。\n\t\t- 当需要添加某一个类时，先去对应的包下的help.txt中找，查看相同功能是否已存在。\n\t\t- utils类 统一放在common包下utils中。\n\t\t- wedigets类 应用的自定义控件均在此包下，每添加一个需要的控件时，都应该先去包下的help.text中查找，如果不存在才可添加。\n\t\t- 类似的还有上传下载，服务，广播等。\n\n2. Fresco图片加载库\n\t\n\t> GitHub地址 [Fresco](https://github.com/facebook/fresco)\n\t\n\t\t- gradle中配置 compile 'com.facebook.fresco:fresco:0.8.1+'\n\t\t- 只在Application中初始化\n\t\t- 需要用到Fresco中View控件的自定义属性时需要在布局根目录添加\n\t\t  命名空间xmlns:fresco=\"http://schemas.android.com/apk/res-auto\"\n3. ButterKnife 依赖注解注入视图\t\n\t> GitHub地址 [ButterKnife](https://github.com/JakeWharton/butterknife)\n4. Material-Dialogs  Material向下兼容库\n\t> GitHub地址 [Material-Dialogs](https://github.com/afollestad/material-dialogs)\n5. EventBus 事件总线\n\t> GitHub地址 [EventBus](https://github.com/greenrobot/EventBus)\n\t\n\t\t- 已经将EventBus集成到项目框架中\n\t\t- boolean isBindEventBusHere() ：是否使用EventBus\n\t\t- onEventComming(EventCenter eventCenter) : 订阅的数据\n6. SystemBarTint 修改系统SmartBar颜色（以设置沉浸式状态栏）\n\t> GitHub地址 [SystemBarTint](https://github.com/jgilfelt/SystemBarTint)\n\t\n\t\tActivity中使用只需设置isApplyKitKatTranslucency() return true\n7. Volley + OKHttp + gson 网络请求架构\n\t> 使用MVP的架构后，以下形式就废弃了\n\t\n\t\t相应模块的网络请求，写在模块对应包下api包中，如com.xxxx.home.api，\r\t\t请求工具类命名为 模块名+RequestUtils.java，\n\t\t请求方法命名为do+请求功能+Request(Context context, final ResponseListener responseListener，Object params…)。\r\t\tonStop中取消请求，调用.cancelAll(Tag)。\r\r\t\r---\n\n## MVP模式\n### MVP 简介\n\n* 按照MVP模式的设计思想，实现View和Model的解耦，弱化Activity/Fragment的功能。\n\n* Presenter负责逻辑的处理，Model负责提供数据，View负责显示数据。View和Model完全分离，其交互在Presenter中进行。\n* Presenter是通过View的接口与View进行交互（给View提供数据），保证在View改变时，Presenter不变。\n* Presenter也是通过Model的接口与Model进行交互（获取提供的数据）。\n\n---\n\n#### MVP 的使用流程\n\n> MVP模式目前还没有特定的规范，凡是符合上述思想的均可称为MVP。Demo可参考项目中DemoActivity。\n\n0. 定义BasePresenter（还可以细分为BaseListPresenter等），BaseView，BaseModel接口。这些接口为M/V/P各模块所共有的特性，比如BasePresenter中定义方法getData()(获取数据)，BaseView中定义showError等。\n\n1. Presenter层：定义Presenter类。Presenter类主要完成业务逻辑。比如，当前Activity功能是列表展示数据，item的选择，删除，点击item跳转等，就可以为Presenter提供以上一些方法。\n2. Model层：定义Model类。职责是获取数据，处理数据，提供数据。所有的数据任务都由这一层完成。\n3. View层：定义View类。View类主要实现View的基本功能，如列表，功能是刷新数据，加载数据，操作数据等，其中的数据不用View关心，只需方法参数中传递数据给View提供就行。View得到数据后的具体操作还是交由Activity处理（比如这里用Adapter处理列表数据，其他情况也可以交由第三方处理，这样避免Presenter和View、Model的耦合性过高）。\n\n---\n### Demo中的示例如下：\n1. Presenter：\n\t\n\tSearchResultListPresenterImpl 为 SearchResultListPresenter的实现类\n\n\tSearchResultListPresenterImpl(Context mContext, SearchResultListView resultListView)\n\t\n\t需要在Activity中获取Context，并实现SearchResultListView接口。\n\t\n2. Model：\n\t\n\tSerchRresultListInteratorImpl 为 CommenListInterator的实现类，主要是获取数据。\n\t\n\t获取数据所需要的参数，通过Presenter提供。\n\t\n3. View：\n\t\n\tSearchResultListView 只是个接口，由Activity调用回调方法。\n\t\n\t提供数据的展示，只有等数据获取到之后才能拿到数据，这一交互过程在Presenter中进行，由\tPresenter控制。\r\r\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n","source":"_posts/android-development-ocumentation.md","raw":"title: Android客户端开发文档\ndate: 2015-11-25 \ntags: [开发文档]\ncategories: [规范文档]\ntoc: true\n---\n\n> version：1.0\n> 2015.11.12 \n> author：zhongshan\n\n## 开发环境规范\n- 开发工具：Android Studio\n- 编码：UTF-8\n- 代码格式化：Code Style –>  Right marging:120，选中Wrap when typing reaches right margin ；java Wrapping and Braces Keep when reformatting选项中全部取消勾选。其他默认。\n- 常用插件安装：Setting –>plugins\rAndroid BufferKnife Zelezny ：BufferKnife依赖注入代码自动生成。\rAndroid Parcelable code generator : 自动生成实现Parceable接口的代码\r。\n- JDK版本：jdk1.7\n\n<!--more-->\n\n## 项目规范：\n\n### 项目结构：\n\n\t- 主工程（app）\n\tcom.xxxx.  ——公司名+项目名（xxxx 公司项目同名）\n\t\t\t\tcommon. ——公共组件模块\n\t\t\t\t\t\tapi. ——公共API接口相关\n\t\t\t\t\t\t\tXXXConstants.java ——XXX常量\n\t\t\t\t\t\tbase. ——公共基类（Activity等）\n\t\t\t\t\t\thttp. ——网络请求基础\n\t\t\t\t\t\tmodel. ——公有数据结构\n\t\t\t\t\t\twedigets. ——自定义控件\n\t\t\t\t\t\tutils ——工具包\n\t\t\t\t\t\tpresenters ——MVP 表现层公共接口\n\t\t\t\t\t\tview\t—MVP 视图处理层公共接口\n\t\t\t\t\t\tinteractor  ——MVP 数据处理层公共接口\n\t\t\t\tXXXXX.\t——子模块名（n+）\r\t\t\t\t\t\tapi. ——模块API接口相关（请求、解析）\r\t\t\t\t\t\tmodel. ——模块相关数据结构\r\t\t\t\t\t\tactivitys. ——模块相关页面\r\t\t\t\t\t\tdb. ——数据库\n\t\t\t\t\t\tpresenters. ——MVP 控制处理层\n\t\t\t\t\t\t\timpl. ——实现类 \n\t\t\t\t\t\tview. ——MVP 视图处理层\n\t\t\t\t\t\tinteractor. ——MVP 数据处理层\n\t\t\t\t\t\t\timpl. ——实现类 \n\t\t\t\t\t\t\t\n\t- module工程（library）\n\t  \t\tcom.android.volley ——Volley源码\n\t \t\tcom.xxxx.library ——项目基础架构\r\n- Activity/Fragment继承结构：\r\t- 所有普通Activity继承BaseActivity\r\t- 所有Fragment继承BaseFragment\r\t- 所有需要边缘滑动退出的Activity继承BaseSwipeBackActivity\n\t\r---\n\r### 命名规范：\n> 遵循驼峰命名法 . 严禁使用拼音。命名要描述清楚，尽量不要简写。\n\n1. 类（class）\n\n\t\t名词，采用大驼峰命名法，尽量避免缩写\n\n\t类|描述|例如\n\t---|---|---\n\tactivity(Fragment) 类|Activity为后缀标识|知识详情页：KnowledgeDetialActivity\n\tAdapter类|Adapter 为后缀标识|搜索返回数据适配器：SearchResultAdapter\n\t解析类 \t |RespFactory为后缀标识\t| 知识模块解析类KnowledgeRespFactory\r\t公共方法类\t | Utils或Manager为后缀标识\t| 线程池管理类：ThreadPoolManager 日志工具类：\tStringUtils\r\t数据库类\t| 以DBHelper后缀标识\t |新闻数据库：NewDBHelper\r\tService类\t |以Service为后缀标识\t |时间服务TimeService\r\tBroadcastReceive类\t|  以Broadcast为后缀标识| 时间通知TimeBroadcast\r\tContentProvider  \t| 以Provider为后缀标识\r\t基础类\t |以Base开头\t|BaseActivity,BaseFragment\n\t\n2. 接口（interface）\n\n\t\t与类相同，大驼峰命名法\n3. 方法（methods）\n\n\t\t动词或动名词，采用小驼峰命名法\t\t\n4. 变量（variables）采用小驼峰命名法。\n   \n\t   \t- \t类中控件名称必须与xml布局id保持一致\r\t\t\t控件及其id命名：功能描述+控件单词首字母简写 \n\t\t\teg：用户头像控件：userAvatarIv\r\t\t- \t类中字段命名:\n\t\t\t(对象描述+集合名称)\r\t\t\tList<MeetingTopicQuery> meetingTopicQueryList\r\t\t\tString  username\r\t\t\tBoolean   isChanged\n\t\t\t(首字母小写，尽量避免缩写)\n\t\t\tMeetingTopicQuery meetingTopicQuery\n5. 常量（Constants\n\n\t\t全部大写，下划线命名法，如：IMAGE_LOADER_CACHE_PATH\n6. 资源文件命名\n\t\n\t\t-  全部小写，采用下划线命名法，加前缀区分\r\t\t-  命名模式：activity名称_逻辑名称/common_逻辑名称\r\t\t-  如果有多种形态如按钮等除外如btn_xx.xml（selector）\n\t\n7. 资源布局文件（XML文件/layout布局文件）\n\n\t\t全部小写，采用下划线命名法\r\t\t-  contentview命名, Activity默认布局，以去掉后缀的Activity类进行命名。\r\t\t   activity_功能模块.xml\r\t\t   例如：activity_main.xml、activity_more.xml\r\t\t-  Dialog命名：dialog_描述.xml\n\t\t\t例如：dialog _hint.xml\r\t\t-  PopupWindow命名：ppw_描述.xml\r\t       例如：ppw _info.xml\r\t\t-  列表项命名listitem_描述.xml\r\t\t   例如：listitem_city.xml   listitem_meeting.xml\r\t\t-  包含项：include_模块.xml\r\t\t   例如：include_head.xml、include_bottom.xml\r\r\t\r---\n\r### 注释规范\n> 要求在逻辑比较复杂的地方写清必要的注释。常量及变量的命名基本都需要有注释。\n\n1. 类（class）接口(interface)的注释\n\n\t\t在AndroidStudio中 按下面格式 修改File Header模板\n\t\t/**\n\t\t* Author：${USER}   \n\t\t* Date：${YEAR}/${MONTH}/${DAY} ${HOUR}:${MINUTE}      \n\t\t* Description：\n\t\t*/\n\t\tDescription中写清楚对此类的描述。\n2. 方法（method）的注释\n\t\n\t\t统一如下形式：\n\t\t/**\n\t    * 方法描述\n\t    * @param 参数1  参数1描述\n\t    * @param 参数2  参数2描述\n\t    */\n\t    \n3. 变量及常量的注释\n\t\n\t\t统一如下形式：\n\t\t/**姓名*/\n\t\tString name;\n\t\t好处是在任何一个调用它的地方，使用F1查就能查看到变量/常量注释\n4. 语句注释\n\t\t\n\t\t统一如下形式：\n\t\t// description\n\n\t\r---\n\n### 通用组件使用说明\n1. 常用类\n\n\t\t- 避免相同功能 的类或方法 重复添加。\n\t\t- 当需要添加某一个类时，先去对应的包下的help.txt中找，查看相同功能是否已存在。\n\t\t- utils类 统一放在common包下utils中。\n\t\t- wedigets类 应用的自定义控件均在此包下，每添加一个需要的控件时，都应该先去包下的help.text中查找，如果不存在才可添加。\n\t\t- 类似的还有上传下载，服务，广播等。\n\n2. Fresco图片加载库\n\t\n\t> GitHub地址 [Fresco](https://github.com/facebook/fresco)\n\t\n\t\t- gradle中配置 compile 'com.facebook.fresco:fresco:0.8.1+'\n\t\t- 只在Application中初始化\n\t\t- 需要用到Fresco中View控件的自定义属性时需要在布局根目录添加\n\t\t  命名空间xmlns:fresco=\"http://schemas.android.com/apk/res-auto\"\n3. ButterKnife 依赖注解注入视图\t\n\t> GitHub地址 [ButterKnife](https://github.com/JakeWharton/butterknife)\n4. Material-Dialogs  Material向下兼容库\n\t> GitHub地址 [Material-Dialogs](https://github.com/afollestad/material-dialogs)\n5. EventBus 事件总线\n\t> GitHub地址 [EventBus](https://github.com/greenrobot/EventBus)\n\t\n\t\t- 已经将EventBus集成到项目框架中\n\t\t- boolean isBindEventBusHere() ：是否使用EventBus\n\t\t- onEventComming(EventCenter eventCenter) : 订阅的数据\n6. SystemBarTint 修改系统SmartBar颜色（以设置沉浸式状态栏）\n\t> GitHub地址 [SystemBarTint](https://github.com/jgilfelt/SystemBarTint)\n\t\n\t\tActivity中使用只需设置isApplyKitKatTranslucency() return true\n7. Volley + OKHttp + gson 网络请求架构\n\t> 使用MVP的架构后，以下形式就废弃了\n\t\n\t\t相应模块的网络请求，写在模块对应包下api包中，如com.xxxx.home.api，\r\t\t请求工具类命名为 模块名+RequestUtils.java，\n\t\t请求方法命名为do+请求功能+Request(Context context, final ResponseListener responseListener，Object params…)。\r\t\tonStop中取消请求，调用.cancelAll(Tag)。\r\r\t\r---\n\n## MVP模式\n### MVP 简介\n\n* 按照MVP模式的设计思想，实现View和Model的解耦，弱化Activity/Fragment的功能。\n\n* Presenter负责逻辑的处理，Model负责提供数据，View负责显示数据。View和Model完全分离，其交互在Presenter中进行。\n* Presenter是通过View的接口与View进行交互（给View提供数据），保证在View改变时，Presenter不变。\n* Presenter也是通过Model的接口与Model进行交互（获取提供的数据）。\n\n---\n\n#### MVP 的使用流程\n\n> MVP模式目前还没有特定的规范，凡是符合上述思想的均可称为MVP。Demo可参考项目中DemoActivity。\n\n0. 定义BasePresenter（还可以细分为BaseListPresenter等），BaseView，BaseModel接口。这些接口为M/V/P各模块所共有的特性，比如BasePresenter中定义方法getData()(获取数据)，BaseView中定义showError等。\n\n1. Presenter层：定义Presenter类。Presenter类主要完成业务逻辑。比如，当前Activity功能是列表展示数据，item的选择，删除，点击item跳转等，就可以为Presenter提供以上一些方法。\n2. Model层：定义Model类。职责是获取数据，处理数据，提供数据。所有的数据任务都由这一层完成。\n3. View层：定义View类。View类主要实现View的基本功能，如列表，功能是刷新数据，加载数据，操作数据等，其中的数据不用View关心，只需方法参数中传递数据给View提供就行。View得到数据后的具体操作还是交由Activity处理（比如这里用Adapter处理列表数据，其他情况也可以交由第三方处理，这样避免Presenter和View、Model的耦合性过高）。\n\n---\n### Demo中的示例如下：\n1. Presenter：\n\t\n\tSearchResultListPresenterImpl 为 SearchResultListPresenter的实现类\n\n\tSearchResultListPresenterImpl(Context mContext, SearchResultListView resultListView)\n\t\n\t需要在Activity中获取Context，并实现SearchResultListView接口。\n\t\n2. Model：\n\t\n\tSerchRresultListInteratorImpl 为 CommenListInterator的实现类，主要是获取数据。\n\t\n\t获取数据所需要的参数，通过Presenter提供。\n\t\n3. View：\n\t\n\tSearchResultListView 只是个接口，由Activity调用回调方法。\n\t\n\t提供数据的展示，只有等数据获取到之后才能拿到数据，这一交互过程在Presenter中进行，由\tPresenter控制。\r\r\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n","slug":"android-development-ocumentation","published":1,"updated":"2015-11-24T20:51:04.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cil3kd5zs0000n86k7twsxty5"},{"title":"Volley在项目中的使用","date":"2016-02-18T16:00:00.000Z","toc":true,"_content":"\n\n## Volley在项目中的使用*（volley+okhttp+gson）*\n\n>使用`volley`、`okhttp`、`gson `进行网络层的架构是当前Android端流行的网络框架之一。对Volley进行二次封装，以便适用于`RESTful API`的接口请求，并提高开发效率。这篇文章结合项目从`Volley `，`okhttp`,`restful api`等方面讲解如何进行二次封装。\n\n### Volley\n\n关于Volley的介绍及基本使用可以参考这篇文章[Volley源码解析](http://a.codekk.com/detail/Android/grumoon/Volley%20%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90).\n可以简单总结为Volley适用于数据量小、请求频繁的网络场景（市面上大部分应用都适用）,异步请求网络支持restful api。\n\n使用方法如下：\n<!-- more -->\n- 获取RequestQueue。\n\n\t\t//public static RequestQueue newRequestQueue(Context context)\n\t\t//public static RequestQueue newRequestQueue(Context context, HttpStack stack)\n\n\t\tRequestQueue mRequestQueue = Volley.newRequestQueue(context,stack));\n\t\n- 创建一个Request。\n\tVolley为我们提供了`StringRequest `、`JsonRequest `、`JsonObjectRequest `、`JsonArrayRequest `、`ImageRequest `这几种网络请求类以获取Request。对于简单的网络请求及简单的数据交互而言这些方法组员满足需求。但随着业务的复杂化这些原生请求会耗费很多精力去处理数据解析以及参数传递的事情。\n\n- 将创建的请求加入队列，即完成请求。\n\n\t\tmRequestQueue.add(Request)\n- 我们还可以对请求设置Tag，及retry.\n\n\t\trequest.setTag(SilverConstant.RequestTag.REQUEST_TAG_PUT_JPUSH);\n\t\trequest.setRetryPolicy(new DefaultRetryPolicy(20 * 1000, 1, 1.0f));\n\t\t\n### okhttp\n\n网上重写httpstack的例子很多，下面是我扣下的一个加以注释。\n\t\n\tpackage com.silversnet.cloudpos.http;\n\t\n\timport com.android.volley.AuthFailureError;\n\timport com.android.volley.Request;\n\timport com.android.volley.toolbox.HttpStack;\n\timport com.squareup.okhttp.Call;\n\timport com.squareup.okhttp.Headers;\n\timport com.squareup.okhttp.MediaType;\n\timport com.squareup.okhttp.OkHttpClient;\n\timport com.squareup.okhttp.Protocol;\n\timport com.squareup.okhttp.RequestBody;\n\timport com.squareup.okhttp.Response;\n\timport com.squareup.okhttp.ResponseBody;\n\t\n\timport org.apache.http.HttpEntity;\n\timport org.apache.http.HttpResponse;\n\timport org.apache.http.ProtocolVersion;\n\timport org.apache.http.StatusLine;\n\timport org.apache.http.entity.BasicHttpEntity;\n\timport org.apache.http.message.BasicHeader;\n\timport org.apache.http.message.BasicHttpResponse;\n\timport org.apache.http.message.BasicStatusLine;\n\t\n\timport java.io.IOException;\n\timport java.util.Map;\n\timport java.util.concurrent.TimeUnit;\n\t\n\tpublic class OkHttpStack implements HttpStack {\n\t    private final OkHttpClient mClient;\n\t\n\t    public OkHttpStack(OkHttpClient client) {\n\t        this.mClient = client;\n\t    }\n\t\n\t    /**\n\t     * 执行请求,获取请求结果\n\t     *\n\t     * @param request           the request to perform\n\t     * @param additionalHeaders additional headers to be sent together with\n\t     *                          {@link Request#getHeaders()}\n\t     * @return\n\t     * @throws IOException\n\t     * @throws AuthFailureError\n\t     */\n\t    @Override\n\t    public HttpResponse performRequest(Request<?> request, Map<String, String> additionalHeaders) throws IOException, AuthFailureError {\n\t\n\t        OkHttpClient client = mClient.clone();\n\t        int timeoutMs = request.getTimeoutMs();\n\t        client.setConnectTimeout(timeoutMs, TimeUnit.MILLISECONDS);\n\t        client.setReadTimeout(timeoutMs, TimeUnit.MILLISECONDS);\n\t        client.setWriteTimeout(timeoutMs, TimeUnit.MILLISECONDS);\n\t\n\t        com.squareup.okhttp.Request.Builder okHttpRequestBuilder = new com.squareup.okhttp.Request.Builder();\n\t        okHttpRequestBuilder.url(request.getUrl());\n\t\n\t        Map<String, String> headers = request.getHeaders();\n\t        for (final String name : headers.keySet()) {\n\t            okHttpRequestBuilder.addHeader(name, headers.get(name));\n\t        }\n\t        for (final String name : additionalHeaders.keySet()) {\n\t            //附加头信息\n\t            okHttpRequestBuilder.addHeader(name, additionalHeaders.get(name));\n\t        }\n\t\n\t        setConnectionParametersForRequest(okHttpRequestBuilder, request);\n\t\n\t        //创建一条完整的okhttp请求\n\t        com.squareup.okhttp.Request okHttpRequest = okHttpRequestBuilder.build();\n\t        Call okHttpCall = client.newCall(okHttpRequest);\n\t        //执行请求，获取返回结果\n\t        Response okHttpResponse = okHttpCall.execute();\n\t\n\t        //由返回码，获取返回状态\n\t        StatusLine responseStatus = new BasicStatusLine(parseProtocol(okHttpResponse.protocol()), okHttpResponse.code(), okHttpResponse.message());\n\t        BasicHttpResponse response = new BasicHttpResponse(responseStatus);\n\t        response.setEntity(entityFromOkHttpResponse(okHttpResponse));\n\t\n\t        Headers responseHeaders = okHttpResponse.headers();\n\t        for (int i = 0, len = responseHeaders.size(); i < len; i++) {\n\t            final String name = responseHeaders.name(i), value = responseHeaders.value(i);\n\t            if (name != null) {\n\t                response.addHeader(new BasicHeader(name, value));\n\t            }\n\t        }\n\t\n\t        return response;\n\t    }\n\t\n\t    /**\n\t     * HttpEntity\n\t     *\n\t     * @param r Response\n\t     * @return\n\t     * @throws IOException\n\t     */\n\t    private static HttpEntity entityFromOkHttpResponse(Response r) throws IOException {\n\t        BasicHttpEntity entity = new BasicHttpEntity();\n\t        ResponseBody body = r.body();\n\t\n\t        entity.setContent(body.byteStream());\n\t        entity.setContentLength(body.contentLength());\n\t        entity.setContentEncoding(r.header(\"Content-Encoding\"));\n\t\n\t        if (body.contentType() != null) {\n\t            entity.setContentType(body.contentType().type());\n\t        }\n\t        return entity;\n\t    }\n\t\n\t    /**\n\t     * 设置请求的连接参数（请求类型，请求体）\n\t     *\n\t     * @param builder\n\t     * @param request\n\t     * @throws IOException\n\t     * @throws AuthFailureError\n\t     */\n\t    @SuppressWarnings(\"deprecation\")\n\t    private static void setConnectionParametersForRequest(com.squareup.okhttp.Request.Builder builder, Request<?> request) throws IOException, AuthFailureError {\n\t        switch (request.getMethod()) {\n\t            case Request.Method.DEPRECATED_GET_OR_POST:\n\t                // Ensure backwards compatibility.  Volley assumes a request with a null body is a GET.\n\t                byte[] postBody = request.getPostBody();\n\t                if (postBody != null) {\n\t                    builder.post(RequestBody.create(MediaType.parse(request.getPostBodyContentType()), postBody));\n\t                }\n\t                break;\n\t            case Request.Method.GET:\n\t                builder.get();\n\t                break;\n\t            case Request.Method.DELETE:\n\t                builder.delete();\n\t                break;\n\t            case Request.Method.POST:\n\t                builder.post(createRequestBody(request));\n\t                break;\n\t            case Request.Method.PUT:\n\t                builder.put(createRequestBody(request));\n\t                break;\n\t            case Request.Method.HEAD:\n\t                builder.head();\n\t                break;\n\t            case Request.Method.OPTIONS:\n\t                builder.method(\"OPTIONS\", null);\n\t                break;\n\t            case Request.Method.TRACE:\n\t                builder.method(\"TRACE\", null);\n\t                break;\n\t            case Request.Method.PATCH:\n\t                builder.patch(createRequestBody(request));\n\t                break;\n\t            default:\n\t                throw new IllegalStateException(\"Unknown method type.\");\n\t        }\n\t    }\n\t\n\t    private static ProtocolVersion parseProtocol(final Protocol p) {\n\t        switch (p) {\n\t            case HTTP_1_0:\n\t                return new ProtocolVersion(\"HTTP\", 1, 0);\n\t            case HTTP_1_1:\n\t                return new ProtocolVersion(\"HTTP\", 1, 1);\n\t            case SPDY_3:\n\t                return new ProtocolVersion(\"SPDY\", 3, 1);\n\t            case HTTP_2:\n\t                return new ProtocolVersion(\"HTTP\", 2, 0);\n\t        }\n\t\n\t        throw new IllegalAccessError(\"Unkwown protocol\");\n\t    }\n\t\n\t    private static RequestBody createRequestBody(Request r) throws AuthFailureError {\n\t        final byte[] body = r.getBody();\n\t        if (body == null)\n\t            return null;\n\t\n\t        return RequestBody.create(MediaType.parse(r.getBodyContentType()), body);\n\t    }\n\t}\n\n### RESTful API\n\nRESTful API就是一种接口定义风格，以`resource`为主体，充分使用Http协议的`post `、`put `、`get `、`delete `对resource进行CRUD操作，从形式上约束url格式。\n可以参考[理解RESTful架构](http://www.ruanyifeng.com/blog/2011/09/restful)、[RESTful API 设计指南](http://www.ruanyifeng.com/blog/2014/05/restful_api.html)进行进一步理解.\n### RequestQueue的封装\n\n由于一个应用对应一个请求队列，那么我们的RequestQueue应该也是唯一的。只需要在application初始化时进行初始化就行。代码如下：\n\n\tpackage com.silversnet.cloudpos.http;\n\t\n\timport android.content.Context;\n\t\n\timport com.android.volley.Request;\n\timport com.android.volley.RequestQueue;\n\timport com.android.volley.toolbox.Volley;\n\timport com.squareup.okhttp.OkHttpClient;\n\t\n\t/**\n\t * Author：zhongshan\n\t * Date：\n\t * Description：\n\t */\n\tpublic class VolleyHelper {\n\t    private static VolleyHelper mInstance;\n\t    public RequestQueue mRequestQueue;\n\t\n\t    private VolleyHelper() {\n\t    }\n\t\n\t\n\t    public void init(Context context){\n\t        if (mRequestQueue == null ) {\n\t        \t//这里我们可以看出我们使用的HttpStack为自定义的OkhttpStack\n\t            mRequestQueue = Volley.newRequestQueue(context, new OkHttpStack(new OkHttpClient()));\n\t        }\n\t    }\n\t\n\t    public static synchronized VolleyHelper getInstance() {\n\t        if (mInstance == null) {\n\t            mInstance = new VolleyHelper();\n\t        }\n\t        return mInstance;\n\t    }\n\t\n\t    /**\n\t     * Returns a Volley request queue for creating network requests\n\t     *\n\t     * @return {@link RequestQueue}\n\t     */\n\t    public RequestQueue getRequestQueue() {\n\t        if (null != mRequestQueue) {\n\t            return mRequestQueue;\n\t        } else {\n\t            throw new IllegalArgumentException(\"RequestQueue is not initialized.\");\n\t        }\n\t    }\n\t\n\t    /**\n\t     * Adds a request to the Volley request queue\n\t     *\n\t     * @param request is the request to add to the Volley queue\n\t     */\n\t    public <T> void addRequest(Request<T> request) {\n\t        getRequestQueue().add(request);\n\t    }\n\t    /**\n\t     * Adds a request to the Volley request queue\n\t     *\n\t     * @param request is the request to add to the Volley queuest\n\t     * @param tag is the tag identifying the request\n\t     */\n\t    public <T> void addRequest(Request<T> request, String tag) {\n\t        request.setTag(tag);\n\t        getRequestQueue().add(request);\n\t    }\n\t    /**\n\t     * Cancels all the request in the Volley queue for a given tag\n\t     *\n\t     * @param tag associated with the Volley requests to be cancelled\n\t     */\n\t    public void cancelAllRequests(String tag) {\n\t        if (getRequestQueue() != null) {\n\t            getRequestQueue().cancelAll(tag);\n\t        }\n\t    }\n\t}\n\n我们只需要在Application中进行 VolleyHelper.getInstance().init(this);，在请求时调用VolleyHelper.getInstance().add()即可。\n\n### Request 的封装\n这部分是最核心部分，由代码可以看出是`Request<T> `的子类，使用`Builder模式`传入参数。使用`HttpSecurityManager`去处理URL中的参数.\n这里的参数分为两类：path variables和query parameters：\n\t\n\t/api/resource/{p1}/subresource/{p2}?q1=1&q2=2\n\t\n- path variables: p1, p2\n- query parameters: q1, q2\n\n封装Request的主要组成类为`Gson `(处理解析)、`HttpSecurityManager`和`SecurityUtil `处理url参数。\n\n代码如下\n\n\tpackage com.silversnet.cloudpos.http;\n\t\n\timport android.util.Log;\n\t\n\timport com.android.volley.AuthFailureError;\n\timport com.android.volley.NetworkResponse;\n\timport com.android.volley.ParseError;\n\timport com.android.volley.Request;\n\timport com.android.volley.Response;\n\timport com.android.volley.toolbox.HttpHeaderParser;\n\timport com.google.gson.Gson;\n\timport com.google.gson.JsonSyntaxException;\n\timport com.silversnet.cloudpos.SilverApplication;\n\timport com.silversnet.cloudpos.exception.SilverException;\n\timport com.silversnet.cloudpos.manager.PaymentManager;\n\timport com.silversnet.cloudpos.util.DateUtil;\n\timport com.silversnet.cloudpos.util.SecurityUtil;\n\t\n\timport java.io.UnsupportedEncodingException;\n\timport java.util.HashMap;\n\timport java.util.Map;\n\t\n\t/**\n\t * Author：zhongshan\n\t * Date：\n\t * Description：\n\t */\n\tpublic class GsonRequest<T> extends Request<T> {\n\n    private static final String CLASSNAME = \"GsonRequest\";\n\n    private final Gson gson = new Gson();\n    private final Class<T> clazz;\n    private final Map<String, String> headers;\n    private final Response.Listener<T> listener;\n    private String params;\n    private Map<String, String> pathVars;\n    private Map<String, String> queryParams;\n    private int statusCode;\n\n    /**\n     * Make a GET request and return a parsed object from JSON.\n     *\n     * @param url    URL of the request to make\n     * @param clazz  Relevant class object, for Gson's reflection\n     * @param params Map of request params\n     */\n    public GsonRequest(String url, Class<T> clazz, String params, Response.Listener<T> listener, Response.ErrorListener errorListener) {\n        super(Method.GET, url, errorListener);\n        this.clazz = clazz;\n        this.headers = null;\n        this.params = params;\n        this.listener = listener;\n    }\n\n    /**\n     * Make a request and return a parsed object from JSON.\n     *\n     * @param url     URL of the request to make\n     * @param clazz   Relevant class object, for Gson's reflection\n     * @param headers Map of request headers\n     */\n    public GsonRequest(int method, String url, Class<T> clazz, Map<String, String> headers, String params, Response.Listener<T> listener, Response.ErrorListener errorListener) {\n        super(method, url, errorListener);\n        this.clazz = clazz;\n        this.headers = headers;\n        this.params = params;\n        this.listener = listener;\n    }\n\n    /**\n     * @param builder requestBuilder\n     */\n    public GsonRequest(RequestBuilder builder) {\n        super(builder.method, builder.getUrl(), builder.errorListener);\n        clazz = builder.clazz;\n        if (builder.headers.size() > 0) {\n            headers = builder.headers;\n        } else {\n            headers = builder.httpSecurityManager.getHeaders();\n        }\n        listener = builder.successListener;\n        params = builder.params;\n        this.pathVars = builder.httpSecurityManager.getPathVars();\n        this.queryParams = builder.httpSecurityManager.getQueryParams();\n    }\n\n    @Override\n    public Map<String, String> getHeaders() throws AuthFailureError {\n        try {\n            long timestamp = DateUtil.timestamp();\n            // TODO: consider getting appKey from database per cposId\n            String appKey = SilverApplication.props.getProperty(\"cpos.appKey\");\n            String hash = SecurityUtil.md5(getPathVarStr() + getParamStr() + timestamp + appKey);\n            headers.put(\"cposId\", PaymentManager.getInstance().getCposId());\n            headers.put(\"timestamp\", String.valueOf(timestamp));\n            headers.put(\"hash\", hash);\n        } catch (SilverException e) {\n            Log.e(CLASSNAME, \"Failed to generate request headers\", e);\n            throw new AuthFailureError();\n        }\n\n        return headers;\n    }\n\n    @Override\n    protected void deliverResponse(T response) {\n        listener.onResponse(response);\n    }\n\n    /**\n     * 请求参数组装：重写getBody方法\n     *\n     * @throws AuthFailureError\n     */\n    @Override\n    public byte[] getBody() throws AuthFailureError {\n        return params == null ? super.getBody() : params.getBytes();\n    }\n\n    public int getStatusCode() {\n        return statusCode;\n    }\n\n    @Override\n    protected Response<T> parseNetworkResponse(NetworkResponse response) {\n        String parsed;\n        statusCode = response.statusCode;\n        Log.e(\"StatusCode： \", statusCode + \"\");\n        try {\n            parsed = new String(response.data, \"UTF-8\");\n            Log.e(\"Response： \", parsed);\n            if (clazz == null) {\n                return (Response<T>) Response.success(parsed, HttpHeaderParser.parseCacheHeaders(response));\n            } else {\n                return Response.success(gson.fromJson(parsed, clazz), HttpHeaderParser.parseCacheHeaders(response));\n            }\n        } catch (UnsupportedEncodingException e) {\n            return Response.error(new ParseError(e));\n        } catch (JsonSyntaxException e) {\n            return Response.error(new ParseError(e));\n        } catch (Exception e) {\n            return Response.error(new ParseError(e));\n        }\n    }\n\n    public static class RequestBuilder {\n        private SecurityManager securityManager = new SecurityManager();\n        private int method = Method.GET;\n        private String url;\n        private String domain;\n        private Class clazz;\n        private Response.Listener successListener;\n        private Response.ErrorListener errorListener;\n        private Map<String, String> headers = new HashMap<>();\n        private String params;\n        private HttpSecurityManager httpSecurityManager = new HttpSecurityManager();\n\n        /**\n         * 添加域名\n         */\n        public RequestBuilder domain(String domain) {\n            this.domain = domain;\n            return this;\n        }\n\n        /**\n         * 添加class\n         */\n        public RequestBuilder clazz(Class clazz) {\n            this.clazz = clazz;\n            return this;\n        }\n\n        /**\n         * request success\n         */\n        public RequestBuilder successListener(Response.Listener successListener) {\n            this.successListener = successListener;\n            return this;\n        }\n\n        /**\n         * request error\n         */\n        public RequestBuilder errorListener(Response.ErrorListener errorListener) {\n            this.errorListener = errorListener;\n            return this;\n        }\n\n        /**\n         * get request\n         */\n        public RequestBuilder get(String url) {\n            this.url = url;\n            this.method = Method.GET;\n            return this;\n        }\n\n        /**\n         * post request\n         */\n        public RequestBuilder post(String url) {\n            this.url = url;\n            this.method = Method.POST;\n            return this;\n        }\n\n        /**\n         * put request\n         */\n        public RequestBuilder put(String url) {\n            this.url = url;\n            this.method = Method.PUT;\n            return this;\n        }\n\n        /**\n         * delete request\n         */\n        public RequestBuilder delete(String url) {\n            this.url = url;\n            this.method = Method.DELETE;\n            return this;\n        }\n\n        /**\n         * add request headers\n         */\n        public RequestBuilder headers(Map<String, String> headers) {\n            this.headers = headers;\n            return this;\n        }\n\n        /**\n         * add pathVars\n         */\n        public RequestBuilder addPathVar(String key, String value) {\n            httpSecurityManager.addPathVar(key, value);\n            return this;\n        }\n\n        /**\n         * add queryParams\n         */\n        public RequestBuilder addQueryParam(String key, String value) {\n            httpSecurityManager.addQueryParam(key, value);\n            return this;\n        }\n\n        /**\n         * params\n         */\n        public RequestBuilder params(String params) {\n            this.params = params != null ? params : null;\n            return this;\n        }\n\n        private String getUrl() {\n            String url = this.domain + this.url;\n            Map<String, String> paths = httpSecurityManager.getPathVars();\n            /**替换{pathkey}-path variables*/\n            for (String pathKey : paths.keySet()) {\n                String pathVal = paths.get(pathKey);\n                url = url.replace(\"{\" + pathKey + \"}\", pathVal);\n            }\n            Map<String, String> params = httpSecurityManager.getQueryParams();\n            /**替换?q1=1&q2=2-query parameters*/\n            url += SecurityUtil.generateQueryString(params);\n            return url;\n        }\n\n        public GsonRequest build() {\n            return new GsonRequest(this);\n        }\n    }\n\n    private String getPathVarStr() {\n        String pathVarString = SecurityUtil.pathVarString(pathVars);\n        return pathVarString;\n    }\n\n    private String getParamStr() {\n        String paramString = SecurityUtil.sortedValString(queryParams);\n        return paramString;\n    }\n\n    @Override\n    public String getBodyContentType() {\n        return \"application/json; charset=utf-8\";\n    }\n\t}\n\n其中我们无法通过header去控制ContentType，如果不重写getBodyContentType()方法，会默认为表单提交。\n创建形式为：\n\t\n\tGsonRequest requestPaymentTypeList = new GsonRequest.RequestBuilder().domain(SilverConstant\n\t                .BASE_REQUEST_DOMAIN)\n\t                .get(SilverConstant.RequestPath.GET_PAYMENT_TYPE_LIST)\n\t                .errorListener(new Response.ErrorListener() {\n\t                    @Override\n\t                    public void onErrorResponse(VolleyError error) {\n\t                        syncSuccess = false;\n\t                        verifyRequestsComplete();\n\t                    }\n\t                })\n\t                .successListener(new Response.Listener() {\n\t                    @Override\n\t                    public void onResponse(Object response) {\n\t                        if (response != null) {\n\t                            PaymentTypeDao.getInstance(context).save((String) response);\n\t                        }\n\t                        verifyRequestsComplete();\n\t                    }\n\t                })\n\t                .build();\n\t        requestPaymentTypeList .setTag(SilverConstant.RequestTag.REQUEST_TAG_GET_PAYMENT_TYPE_LIST);\n\t        requestPaymentTypeList .setRetryPolicy(new DefaultRetryPolicy(20 * 1000, 1, 1.0f));\n\t        VolleyHelper.getInstance().addRequest(requestPaymentTypeList);\n\t        \n其实我们可以对请求进行进一步封装，并将异步请求的结果通过`ResponseListener`接口处理。\n\n\tpublic interface ResponseListener {\n\t    void ResponseSuccess(Object response, String tag);\n\t    void ResponseError(VolleyError error, String tag);\n\t}\n\n进一步封装如下：\n\t\n\tpublic static GsonRequest doRequest(String url, int method, Map<String, String> pathVars,\n\t      Map<String, String> queryParams, String params, Class clazz,\n\t      final ResponseListener responseListener, final String tag) {\n\t\n\t    Map<String, String> headers = getHeaders(pathVars, queryParams);\n\t\n\t    BaseRequest request = new BaseRequest.RequestBuilder().domain(ApiConstants.BASE_REQUEST_DOMAIN)\n\t        .url(url)\n\t        .method(method)\n\t        .headers(headers)\n\t        .addPaths(pathVars)\n\t        .addParams(queryParams)\n\t        .params(params)\n\t        .clazz(clazz)\n\t        .successListener(new Response.Listener() {\n\t          @Override public void onResponse(Object response) {\n\t            Object msgObject = null;\n\t            try {\n\t              msgObject = ResponseParseFactory.createMsgObject(tag, response);\n\t            }catch (Exception e){\n\t              e.printStackTrace();\n\t            }\n\t            responseListener.ResponseSuccess(msgObject, tag);\n\t          }\n\t        })\n\t        .errorListener(new Response.ErrorListener() {\n\t          @Override public void onErrorResponse(VolleyError error) {\n\t            responseListener.ResponseError(error, tag);\n\t          }\n\t        })\n\t        .build();\n\t    request.setTag(tag);\n\t    request.setRetryPolicy(new DefaultRetryPolicy(20 * 1000, 1, 1.0f));\n\t    HttpRequestHelper.getInstance().addRequest(request);\n\t    return request;\n\t  }\n\t  \n### 最后\n\n项目中使用Volley已经有一段时间了，今天把代码贴了出来，也算是回顾吧，虽然使用了更适合RESTful api并且效率更高的Retrofit。O(∩_∩)O~\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/volley-used.md","raw":"title: Volley在项目中的使用\ndate: 2016-02-19 \ntags: [android]\ncategories: [android]\ntoc: true\n---\n\n\n## Volley在项目中的使用*（volley+okhttp+gson）*\n\n>使用`volley`、`okhttp`、`gson `进行网络层的架构是当前Android端流行的网络框架之一。对Volley进行二次封装，以便适用于`RESTful API`的接口请求，并提高开发效率。这篇文章结合项目从`Volley `，`okhttp`,`restful api`等方面讲解如何进行二次封装。\n\n### Volley\n\n关于Volley的介绍及基本使用可以参考这篇文章[Volley源码解析](http://a.codekk.com/detail/Android/grumoon/Volley%20%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90).\n可以简单总结为Volley适用于数据量小、请求频繁的网络场景（市面上大部分应用都适用）,异步请求网络支持restful api。\n\n使用方法如下：\n<!-- more -->\n- 获取RequestQueue。\n\n\t\t//public static RequestQueue newRequestQueue(Context context)\n\t\t//public static RequestQueue newRequestQueue(Context context, HttpStack stack)\n\n\t\tRequestQueue mRequestQueue = Volley.newRequestQueue(context,stack));\n\t\n- 创建一个Request。\n\tVolley为我们提供了`StringRequest `、`JsonRequest `、`JsonObjectRequest `、`JsonArrayRequest `、`ImageRequest `这几种网络请求类以获取Request。对于简单的网络请求及简单的数据交互而言这些方法组员满足需求。但随着业务的复杂化这些原生请求会耗费很多精力去处理数据解析以及参数传递的事情。\n\n- 将创建的请求加入队列，即完成请求。\n\n\t\tmRequestQueue.add(Request)\n- 我们还可以对请求设置Tag，及retry.\n\n\t\trequest.setTag(SilverConstant.RequestTag.REQUEST_TAG_PUT_JPUSH);\n\t\trequest.setRetryPolicy(new DefaultRetryPolicy(20 * 1000, 1, 1.0f));\n\t\t\n### okhttp\n\n网上重写httpstack的例子很多，下面是我扣下的一个加以注释。\n\t\n\tpackage com.silversnet.cloudpos.http;\n\t\n\timport com.android.volley.AuthFailureError;\n\timport com.android.volley.Request;\n\timport com.android.volley.toolbox.HttpStack;\n\timport com.squareup.okhttp.Call;\n\timport com.squareup.okhttp.Headers;\n\timport com.squareup.okhttp.MediaType;\n\timport com.squareup.okhttp.OkHttpClient;\n\timport com.squareup.okhttp.Protocol;\n\timport com.squareup.okhttp.RequestBody;\n\timport com.squareup.okhttp.Response;\n\timport com.squareup.okhttp.ResponseBody;\n\t\n\timport org.apache.http.HttpEntity;\n\timport org.apache.http.HttpResponse;\n\timport org.apache.http.ProtocolVersion;\n\timport org.apache.http.StatusLine;\n\timport org.apache.http.entity.BasicHttpEntity;\n\timport org.apache.http.message.BasicHeader;\n\timport org.apache.http.message.BasicHttpResponse;\n\timport org.apache.http.message.BasicStatusLine;\n\t\n\timport java.io.IOException;\n\timport java.util.Map;\n\timport java.util.concurrent.TimeUnit;\n\t\n\tpublic class OkHttpStack implements HttpStack {\n\t    private final OkHttpClient mClient;\n\t\n\t    public OkHttpStack(OkHttpClient client) {\n\t        this.mClient = client;\n\t    }\n\t\n\t    /**\n\t     * 执行请求,获取请求结果\n\t     *\n\t     * @param request           the request to perform\n\t     * @param additionalHeaders additional headers to be sent together with\n\t     *                          {@link Request#getHeaders()}\n\t     * @return\n\t     * @throws IOException\n\t     * @throws AuthFailureError\n\t     */\n\t    @Override\n\t    public HttpResponse performRequest(Request<?> request, Map<String, String> additionalHeaders) throws IOException, AuthFailureError {\n\t\n\t        OkHttpClient client = mClient.clone();\n\t        int timeoutMs = request.getTimeoutMs();\n\t        client.setConnectTimeout(timeoutMs, TimeUnit.MILLISECONDS);\n\t        client.setReadTimeout(timeoutMs, TimeUnit.MILLISECONDS);\n\t        client.setWriteTimeout(timeoutMs, TimeUnit.MILLISECONDS);\n\t\n\t        com.squareup.okhttp.Request.Builder okHttpRequestBuilder = new com.squareup.okhttp.Request.Builder();\n\t        okHttpRequestBuilder.url(request.getUrl());\n\t\n\t        Map<String, String> headers = request.getHeaders();\n\t        for (final String name : headers.keySet()) {\n\t            okHttpRequestBuilder.addHeader(name, headers.get(name));\n\t        }\n\t        for (final String name : additionalHeaders.keySet()) {\n\t            //附加头信息\n\t            okHttpRequestBuilder.addHeader(name, additionalHeaders.get(name));\n\t        }\n\t\n\t        setConnectionParametersForRequest(okHttpRequestBuilder, request);\n\t\n\t        //创建一条完整的okhttp请求\n\t        com.squareup.okhttp.Request okHttpRequest = okHttpRequestBuilder.build();\n\t        Call okHttpCall = client.newCall(okHttpRequest);\n\t        //执行请求，获取返回结果\n\t        Response okHttpResponse = okHttpCall.execute();\n\t\n\t        //由返回码，获取返回状态\n\t        StatusLine responseStatus = new BasicStatusLine(parseProtocol(okHttpResponse.protocol()), okHttpResponse.code(), okHttpResponse.message());\n\t        BasicHttpResponse response = new BasicHttpResponse(responseStatus);\n\t        response.setEntity(entityFromOkHttpResponse(okHttpResponse));\n\t\n\t        Headers responseHeaders = okHttpResponse.headers();\n\t        for (int i = 0, len = responseHeaders.size(); i < len; i++) {\n\t            final String name = responseHeaders.name(i), value = responseHeaders.value(i);\n\t            if (name != null) {\n\t                response.addHeader(new BasicHeader(name, value));\n\t            }\n\t        }\n\t\n\t        return response;\n\t    }\n\t\n\t    /**\n\t     * HttpEntity\n\t     *\n\t     * @param r Response\n\t     * @return\n\t     * @throws IOException\n\t     */\n\t    private static HttpEntity entityFromOkHttpResponse(Response r) throws IOException {\n\t        BasicHttpEntity entity = new BasicHttpEntity();\n\t        ResponseBody body = r.body();\n\t\n\t        entity.setContent(body.byteStream());\n\t        entity.setContentLength(body.contentLength());\n\t        entity.setContentEncoding(r.header(\"Content-Encoding\"));\n\t\n\t        if (body.contentType() != null) {\n\t            entity.setContentType(body.contentType().type());\n\t        }\n\t        return entity;\n\t    }\n\t\n\t    /**\n\t     * 设置请求的连接参数（请求类型，请求体）\n\t     *\n\t     * @param builder\n\t     * @param request\n\t     * @throws IOException\n\t     * @throws AuthFailureError\n\t     */\n\t    @SuppressWarnings(\"deprecation\")\n\t    private static void setConnectionParametersForRequest(com.squareup.okhttp.Request.Builder builder, Request<?> request) throws IOException, AuthFailureError {\n\t        switch (request.getMethod()) {\n\t            case Request.Method.DEPRECATED_GET_OR_POST:\n\t                // Ensure backwards compatibility.  Volley assumes a request with a null body is a GET.\n\t                byte[] postBody = request.getPostBody();\n\t                if (postBody != null) {\n\t                    builder.post(RequestBody.create(MediaType.parse(request.getPostBodyContentType()), postBody));\n\t                }\n\t                break;\n\t            case Request.Method.GET:\n\t                builder.get();\n\t                break;\n\t            case Request.Method.DELETE:\n\t                builder.delete();\n\t                break;\n\t            case Request.Method.POST:\n\t                builder.post(createRequestBody(request));\n\t                break;\n\t            case Request.Method.PUT:\n\t                builder.put(createRequestBody(request));\n\t                break;\n\t            case Request.Method.HEAD:\n\t                builder.head();\n\t                break;\n\t            case Request.Method.OPTIONS:\n\t                builder.method(\"OPTIONS\", null);\n\t                break;\n\t            case Request.Method.TRACE:\n\t                builder.method(\"TRACE\", null);\n\t                break;\n\t            case Request.Method.PATCH:\n\t                builder.patch(createRequestBody(request));\n\t                break;\n\t            default:\n\t                throw new IllegalStateException(\"Unknown method type.\");\n\t        }\n\t    }\n\t\n\t    private static ProtocolVersion parseProtocol(final Protocol p) {\n\t        switch (p) {\n\t            case HTTP_1_0:\n\t                return new ProtocolVersion(\"HTTP\", 1, 0);\n\t            case HTTP_1_1:\n\t                return new ProtocolVersion(\"HTTP\", 1, 1);\n\t            case SPDY_3:\n\t                return new ProtocolVersion(\"SPDY\", 3, 1);\n\t            case HTTP_2:\n\t                return new ProtocolVersion(\"HTTP\", 2, 0);\n\t        }\n\t\n\t        throw new IllegalAccessError(\"Unkwown protocol\");\n\t    }\n\t\n\t    private static RequestBody createRequestBody(Request r) throws AuthFailureError {\n\t        final byte[] body = r.getBody();\n\t        if (body == null)\n\t            return null;\n\t\n\t        return RequestBody.create(MediaType.parse(r.getBodyContentType()), body);\n\t    }\n\t}\n\n### RESTful API\n\nRESTful API就是一种接口定义风格，以`resource`为主体，充分使用Http协议的`post `、`put `、`get `、`delete `对resource进行CRUD操作，从形式上约束url格式。\n可以参考[理解RESTful架构](http://www.ruanyifeng.com/blog/2011/09/restful)、[RESTful API 设计指南](http://www.ruanyifeng.com/blog/2014/05/restful_api.html)进行进一步理解.\n### RequestQueue的封装\n\n由于一个应用对应一个请求队列，那么我们的RequestQueue应该也是唯一的。只需要在application初始化时进行初始化就行。代码如下：\n\n\tpackage com.silversnet.cloudpos.http;\n\t\n\timport android.content.Context;\n\t\n\timport com.android.volley.Request;\n\timport com.android.volley.RequestQueue;\n\timport com.android.volley.toolbox.Volley;\n\timport com.squareup.okhttp.OkHttpClient;\n\t\n\t/**\n\t * Author：zhongshan\n\t * Date：\n\t * Description：\n\t */\n\tpublic class VolleyHelper {\n\t    private static VolleyHelper mInstance;\n\t    public RequestQueue mRequestQueue;\n\t\n\t    private VolleyHelper() {\n\t    }\n\t\n\t\n\t    public void init(Context context){\n\t        if (mRequestQueue == null ) {\n\t        \t//这里我们可以看出我们使用的HttpStack为自定义的OkhttpStack\n\t            mRequestQueue = Volley.newRequestQueue(context, new OkHttpStack(new OkHttpClient()));\n\t        }\n\t    }\n\t\n\t    public static synchronized VolleyHelper getInstance() {\n\t        if (mInstance == null) {\n\t            mInstance = new VolleyHelper();\n\t        }\n\t        return mInstance;\n\t    }\n\t\n\t    /**\n\t     * Returns a Volley request queue for creating network requests\n\t     *\n\t     * @return {@link RequestQueue}\n\t     */\n\t    public RequestQueue getRequestQueue() {\n\t        if (null != mRequestQueue) {\n\t            return mRequestQueue;\n\t        } else {\n\t            throw new IllegalArgumentException(\"RequestQueue is not initialized.\");\n\t        }\n\t    }\n\t\n\t    /**\n\t     * Adds a request to the Volley request queue\n\t     *\n\t     * @param request is the request to add to the Volley queue\n\t     */\n\t    public <T> void addRequest(Request<T> request) {\n\t        getRequestQueue().add(request);\n\t    }\n\t    /**\n\t     * Adds a request to the Volley request queue\n\t     *\n\t     * @param request is the request to add to the Volley queuest\n\t     * @param tag is the tag identifying the request\n\t     */\n\t    public <T> void addRequest(Request<T> request, String tag) {\n\t        request.setTag(tag);\n\t        getRequestQueue().add(request);\n\t    }\n\t    /**\n\t     * Cancels all the request in the Volley queue for a given tag\n\t     *\n\t     * @param tag associated with the Volley requests to be cancelled\n\t     */\n\t    public void cancelAllRequests(String tag) {\n\t        if (getRequestQueue() != null) {\n\t            getRequestQueue().cancelAll(tag);\n\t        }\n\t    }\n\t}\n\n我们只需要在Application中进行 VolleyHelper.getInstance().init(this);，在请求时调用VolleyHelper.getInstance().add()即可。\n\n### Request 的封装\n这部分是最核心部分，由代码可以看出是`Request<T> `的子类，使用`Builder模式`传入参数。使用`HttpSecurityManager`去处理URL中的参数.\n这里的参数分为两类：path variables和query parameters：\n\t\n\t/api/resource/{p1}/subresource/{p2}?q1=1&q2=2\n\t\n- path variables: p1, p2\n- query parameters: q1, q2\n\n封装Request的主要组成类为`Gson `(处理解析)、`HttpSecurityManager`和`SecurityUtil `处理url参数。\n\n代码如下\n\n\tpackage com.silversnet.cloudpos.http;\n\t\n\timport android.util.Log;\n\t\n\timport com.android.volley.AuthFailureError;\n\timport com.android.volley.NetworkResponse;\n\timport com.android.volley.ParseError;\n\timport com.android.volley.Request;\n\timport com.android.volley.Response;\n\timport com.android.volley.toolbox.HttpHeaderParser;\n\timport com.google.gson.Gson;\n\timport com.google.gson.JsonSyntaxException;\n\timport com.silversnet.cloudpos.SilverApplication;\n\timport com.silversnet.cloudpos.exception.SilverException;\n\timport com.silversnet.cloudpos.manager.PaymentManager;\n\timport com.silversnet.cloudpos.util.DateUtil;\n\timport com.silversnet.cloudpos.util.SecurityUtil;\n\t\n\timport java.io.UnsupportedEncodingException;\n\timport java.util.HashMap;\n\timport java.util.Map;\n\t\n\t/**\n\t * Author：zhongshan\n\t * Date：\n\t * Description：\n\t */\n\tpublic class GsonRequest<T> extends Request<T> {\n\n    private static final String CLASSNAME = \"GsonRequest\";\n\n    private final Gson gson = new Gson();\n    private final Class<T> clazz;\n    private final Map<String, String> headers;\n    private final Response.Listener<T> listener;\n    private String params;\n    private Map<String, String> pathVars;\n    private Map<String, String> queryParams;\n    private int statusCode;\n\n    /**\n     * Make a GET request and return a parsed object from JSON.\n     *\n     * @param url    URL of the request to make\n     * @param clazz  Relevant class object, for Gson's reflection\n     * @param params Map of request params\n     */\n    public GsonRequest(String url, Class<T> clazz, String params, Response.Listener<T> listener, Response.ErrorListener errorListener) {\n        super(Method.GET, url, errorListener);\n        this.clazz = clazz;\n        this.headers = null;\n        this.params = params;\n        this.listener = listener;\n    }\n\n    /**\n     * Make a request and return a parsed object from JSON.\n     *\n     * @param url     URL of the request to make\n     * @param clazz   Relevant class object, for Gson's reflection\n     * @param headers Map of request headers\n     */\n    public GsonRequest(int method, String url, Class<T> clazz, Map<String, String> headers, String params, Response.Listener<T> listener, Response.ErrorListener errorListener) {\n        super(method, url, errorListener);\n        this.clazz = clazz;\n        this.headers = headers;\n        this.params = params;\n        this.listener = listener;\n    }\n\n    /**\n     * @param builder requestBuilder\n     */\n    public GsonRequest(RequestBuilder builder) {\n        super(builder.method, builder.getUrl(), builder.errorListener);\n        clazz = builder.clazz;\n        if (builder.headers.size() > 0) {\n            headers = builder.headers;\n        } else {\n            headers = builder.httpSecurityManager.getHeaders();\n        }\n        listener = builder.successListener;\n        params = builder.params;\n        this.pathVars = builder.httpSecurityManager.getPathVars();\n        this.queryParams = builder.httpSecurityManager.getQueryParams();\n    }\n\n    @Override\n    public Map<String, String> getHeaders() throws AuthFailureError {\n        try {\n            long timestamp = DateUtil.timestamp();\n            // TODO: consider getting appKey from database per cposId\n            String appKey = SilverApplication.props.getProperty(\"cpos.appKey\");\n            String hash = SecurityUtil.md5(getPathVarStr() + getParamStr() + timestamp + appKey);\n            headers.put(\"cposId\", PaymentManager.getInstance().getCposId());\n            headers.put(\"timestamp\", String.valueOf(timestamp));\n            headers.put(\"hash\", hash);\n        } catch (SilverException e) {\n            Log.e(CLASSNAME, \"Failed to generate request headers\", e);\n            throw new AuthFailureError();\n        }\n\n        return headers;\n    }\n\n    @Override\n    protected void deliverResponse(T response) {\n        listener.onResponse(response);\n    }\n\n    /**\n     * 请求参数组装：重写getBody方法\n     *\n     * @throws AuthFailureError\n     */\n    @Override\n    public byte[] getBody() throws AuthFailureError {\n        return params == null ? super.getBody() : params.getBytes();\n    }\n\n    public int getStatusCode() {\n        return statusCode;\n    }\n\n    @Override\n    protected Response<T> parseNetworkResponse(NetworkResponse response) {\n        String parsed;\n        statusCode = response.statusCode;\n        Log.e(\"StatusCode： \", statusCode + \"\");\n        try {\n            parsed = new String(response.data, \"UTF-8\");\n            Log.e(\"Response： \", parsed);\n            if (clazz == null) {\n                return (Response<T>) Response.success(parsed, HttpHeaderParser.parseCacheHeaders(response));\n            } else {\n                return Response.success(gson.fromJson(parsed, clazz), HttpHeaderParser.parseCacheHeaders(response));\n            }\n        } catch (UnsupportedEncodingException e) {\n            return Response.error(new ParseError(e));\n        } catch (JsonSyntaxException e) {\n            return Response.error(new ParseError(e));\n        } catch (Exception e) {\n            return Response.error(new ParseError(e));\n        }\n    }\n\n    public static class RequestBuilder {\n        private SecurityManager securityManager = new SecurityManager();\n        private int method = Method.GET;\n        private String url;\n        private String domain;\n        private Class clazz;\n        private Response.Listener successListener;\n        private Response.ErrorListener errorListener;\n        private Map<String, String> headers = new HashMap<>();\n        private String params;\n        private HttpSecurityManager httpSecurityManager = new HttpSecurityManager();\n\n        /**\n         * 添加域名\n         */\n        public RequestBuilder domain(String domain) {\n            this.domain = domain;\n            return this;\n        }\n\n        /**\n         * 添加class\n         */\n        public RequestBuilder clazz(Class clazz) {\n            this.clazz = clazz;\n            return this;\n        }\n\n        /**\n         * request success\n         */\n        public RequestBuilder successListener(Response.Listener successListener) {\n            this.successListener = successListener;\n            return this;\n        }\n\n        /**\n         * request error\n         */\n        public RequestBuilder errorListener(Response.ErrorListener errorListener) {\n            this.errorListener = errorListener;\n            return this;\n        }\n\n        /**\n         * get request\n         */\n        public RequestBuilder get(String url) {\n            this.url = url;\n            this.method = Method.GET;\n            return this;\n        }\n\n        /**\n         * post request\n         */\n        public RequestBuilder post(String url) {\n            this.url = url;\n            this.method = Method.POST;\n            return this;\n        }\n\n        /**\n         * put request\n         */\n        public RequestBuilder put(String url) {\n            this.url = url;\n            this.method = Method.PUT;\n            return this;\n        }\n\n        /**\n         * delete request\n         */\n        public RequestBuilder delete(String url) {\n            this.url = url;\n            this.method = Method.DELETE;\n            return this;\n        }\n\n        /**\n         * add request headers\n         */\n        public RequestBuilder headers(Map<String, String> headers) {\n            this.headers = headers;\n            return this;\n        }\n\n        /**\n         * add pathVars\n         */\n        public RequestBuilder addPathVar(String key, String value) {\n            httpSecurityManager.addPathVar(key, value);\n            return this;\n        }\n\n        /**\n         * add queryParams\n         */\n        public RequestBuilder addQueryParam(String key, String value) {\n            httpSecurityManager.addQueryParam(key, value);\n            return this;\n        }\n\n        /**\n         * params\n         */\n        public RequestBuilder params(String params) {\n            this.params = params != null ? params : null;\n            return this;\n        }\n\n        private String getUrl() {\n            String url = this.domain + this.url;\n            Map<String, String> paths = httpSecurityManager.getPathVars();\n            /**替换{pathkey}-path variables*/\n            for (String pathKey : paths.keySet()) {\n                String pathVal = paths.get(pathKey);\n                url = url.replace(\"{\" + pathKey + \"}\", pathVal);\n            }\n            Map<String, String> params = httpSecurityManager.getQueryParams();\n            /**替换?q1=1&q2=2-query parameters*/\n            url += SecurityUtil.generateQueryString(params);\n            return url;\n        }\n\n        public GsonRequest build() {\n            return new GsonRequest(this);\n        }\n    }\n\n    private String getPathVarStr() {\n        String pathVarString = SecurityUtil.pathVarString(pathVars);\n        return pathVarString;\n    }\n\n    private String getParamStr() {\n        String paramString = SecurityUtil.sortedValString(queryParams);\n        return paramString;\n    }\n\n    @Override\n    public String getBodyContentType() {\n        return \"application/json; charset=utf-8\";\n    }\n\t}\n\n其中我们无法通过header去控制ContentType，如果不重写getBodyContentType()方法，会默认为表单提交。\n创建形式为：\n\t\n\tGsonRequest requestPaymentTypeList = new GsonRequest.RequestBuilder().domain(SilverConstant\n\t                .BASE_REQUEST_DOMAIN)\n\t                .get(SilverConstant.RequestPath.GET_PAYMENT_TYPE_LIST)\n\t                .errorListener(new Response.ErrorListener() {\n\t                    @Override\n\t                    public void onErrorResponse(VolleyError error) {\n\t                        syncSuccess = false;\n\t                        verifyRequestsComplete();\n\t                    }\n\t                })\n\t                .successListener(new Response.Listener() {\n\t                    @Override\n\t                    public void onResponse(Object response) {\n\t                        if (response != null) {\n\t                            PaymentTypeDao.getInstance(context).save((String) response);\n\t                        }\n\t                        verifyRequestsComplete();\n\t                    }\n\t                })\n\t                .build();\n\t        requestPaymentTypeList .setTag(SilverConstant.RequestTag.REQUEST_TAG_GET_PAYMENT_TYPE_LIST);\n\t        requestPaymentTypeList .setRetryPolicy(new DefaultRetryPolicy(20 * 1000, 1, 1.0f));\n\t        VolleyHelper.getInstance().addRequest(requestPaymentTypeList);\n\t        \n其实我们可以对请求进行进一步封装，并将异步请求的结果通过`ResponseListener`接口处理。\n\n\tpublic interface ResponseListener {\n\t    void ResponseSuccess(Object response, String tag);\n\t    void ResponseError(VolleyError error, String tag);\n\t}\n\n进一步封装如下：\n\t\n\tpublic static GsonRequest doRequest(String url, int method, Map<String, String> pathVars,\n\t      Map<String, String> queryParams, String params, Class clazz,\n\t      final ResponseListener responseListener, final String tag) {\n\t\n\t    Map<String, String> headers = getHeaders(pathVars, queryParams);\n\t\n\t    BaseRequest request = new BaseRequest.RequestBuilder().domain(ApiConstants.BASE_REQUEST_DOMAIN)\n\t        .url(url)\n\t        .method(method)\n\t        .headers(headers)\n\t        .addPaths(pathVars)\n\t        .addParams(queryParams)\n\t        .params(params)\n\t        .clazz(clazz)\n\t        .successListener(new Response.Listener() {\n\t          @Override public void onResponse(Object response) {\n\t            Object msgObject = null;\n\t            try {\n\t              msgObject = ResponseParseFactory.createMsgObject(tag, response);\n\t            }catch (Exception e){\n\t              e.printStackTrace();\n\t            }\n\t            responseListener.ResponseSuccess(msgObject, tag);\n\t          }\n\t        })\n\t        .errorListener(new Response.ErrorListener() {\n\t          @Override public void onErrorResponse(VolleyError error) {\n\t            responseListener.ResponseError(error, tag);\n\t          }\n\t        })\n\t        .build();\n\t    request.setTag(tag);\n\t    request.setRetryPolicy(new DefaultRetryPolicy(20 * 1000, 1, 1.0f));\n\t    HttpRequestHelper.getInstance().addRequest(request);\n\t    return request;\n\t  }\n\t  \n### 最后\n\n项目中使用Volley已经有一段时间了，今天把代码贴了出来，也算是回顾吧，虽然使用了更适合RESTful api并且效率更高的Retrofit。O(∩_∩)O~\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"volley-used","published":1,"updated":"2016-02-19T19:01:59.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cil3kd60e0008n86klpciczx2"},{"title":"MVP模式","date":"2015-11-23T16:00:00.000Z","toc":true,"_content":"## MVP模式\n\n* 项目按照MVP模式的设计思想，实现View和Model的解耦，弱化Activity/Fragment的功能。\n\n* Presenter负责逻辑的处理，Model负责提供数据，View负责显示数据。View和Model完全分离，其交互在Presenter中进行。\n* Presenter是通过View的接口与View进行交互（给View提供数据），保证在View改变时，Presenter不变。\n* Presenter也是通过Model的接口与Model进行交互（获取提供的数据）。\n\n<!--more-->\n\n---\n\n#### MVP 的使用流程\n\n> MVP模式目前还没有特定的规范，凡是符合上述思想的均可称为MVP。Demo可参考项目中DemoActivity。\n\n0. 定义BasePresenter（还可以细分为BaseListPresenter等），BaseView，BaseModel接口。这些接口为M/V/P各模块所共有的特性，比如BasePresenter中定义方法getData()(获取数据)，BaseView中定义showError等。\n\n1. Presenter层：定义Presenter类。Presenter类主要完成业务逻辑。比如，当前Activity功能是列表展示数据，item的选择，删除，点击item跳转等，就可以为Presenter提供以上一些方法。\n2. Model层：定义Model类。职责是获取数据，处理数据，提供数据。所有的数据任务都由这一层完成。\n3. View层：定义View类。View类主要实现View的基本功能，如列表，功能是刷新数据，加载数据，操作数据等，其中的数据不用View关心，只需方法参数中传递数据给View提供就行。View得到数据后的具体操作还是交由Activity处理（比如这里用Adapter处理列表数据，其他情况也可以交由第三方处理，这样避免Presenter和View、Model的耦合性过高）。\n\n---\n### Demo中的示例如下：\n1. Presenter：\n\t\n\tSearchResultListPresenterImpl 为 SearchResultListPresenter的实现类\n\n\tSearchResultListPresenterImpl(Context mContext, SearchResultListView resultListView)\n\t\n\t需要在Activity中获取Context，并实现SearchResultListView接口。\n\t\n2. Model：\n\t\n\tSerchRresultListInteratorImpl 为 CommenListInterator的实现类，主要是获取数据。\n\t\n\t获取数据所需要的参数，通过Presenter提供。\n\t\n3. View：\n\t\n\tSearchResultListView 只是个接口，由Activity调用回调方法。\n\t\n\t提供数据的展示，只有等数据获取到之后才能拿到数据，这一交互过程在Presenter中进行，由\tPresenter控制。","source":"_posts/mvp-file.md","raw":"title: MVP模式\ndate: 2015-11-24 \ntags: \n\t- MVP\ncategories: \n\t- MVP\ntoc: true\n---\n## MVP模式\n\n* 项目按照MVP模式的设计思想，实现View和Model的解耦，弱化Activity/Fragment的功能。\n\n* Presenter负责逻辑的处理，Model负责提供数据，View负责显示数据。View和Model完全分离，其交互在Presenter中进行。\n* Presenter是通过View的接口与View进行交互（给View提供数据），保证在View改变时，Presenter不变。\n* Presenter也是通过Model的接口与Model进行交互（获取提供的数据）。\n\n<!--more-->\n\n---\n\n#### MVP 的使用流程\n\n> MVP模式目前还没有特定的规范，凡是符合上述思想的均可称为MVP。Demo可参考项目中DemoActivity。\n\n0. 定义BasePresenter（还可以细分为BaseListPresenter等），BaseView，BaseModel接口。这些接口为M/V/P各模块所共有的特性，比如BasePresenter中定义方法getData()(获取数据)，BaseView中定义showError等。\n\n1. Presenter层：定义Presenter类。Presenter类主要完成业务逻辑。比如，当前Activity功能是列表展示数据，item的选择，删除，点击item跳转等，就可以为Presenter提供以上一些方法。\n2. Model层：定义Model类。职责是获取数据，处理数据，提供数据。所有的数据任务都由这一层完成。\n3. View层：定义View类。View类主要实现View的基本功能，如列表，功能是刷新数据，加载数据，操作数据等，其中的数据不用View关心，只需方法参数中传递数据给View提供就行。View得到数据后的具体操作还是交由Activity处理（比如这里用Adapter处理列表数据，其他情况也可以交由第三方处理，这样避免Presenter和View、Model的耦合性过高）。\n\n---\n### Demo中的示例如下：\n1. Presenter：\n\t\n\tSearchResultListPresenterImpl 为 SearchResultListPresenter的实现类\n\n\tSearchResultListPresenterImpl(Context mContext, SearchResultListView resultListView)\n\t\n\t需要在Activity中获取Context，并实现SearchResultListView接口。\n\t\n2. Model：\n\t\n\tSerchRresultListInteratorImpl 为 CommenListInterator的实现类，主要是获取数据。\n\t\n\t获取数据所需要的参数，通过Presenter提供。\n\t\n3. View：\n\t\n\tSearchResultListView 只是个接口，由Activity调用回调方法。\n\t\n\t提供数据的展示，只有等数据获取到之后才能拿到数据，这一交互过程在Presenter中进行，由\tPresenter控制。","slug":"mvp-file","published":1,"updated":"2015-11-24T20:51:30.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cil3kd60q000dn86k6q9jb7j8"},{"title":"gradle在android中的用法概要","date":"2015-11-30T01:44:48.000Z","toc":true,"_content":"#### project中的build.gradle\n- buildscript: 配置驱动build的代码，声明在Maven中央仓库，取classpath dependency，即android plugin for gradle xxx\n- apply plugin：指明用到的plugin是android，就像在前面java程序中，用的plugin是java一样。\n- android{...} 中配置了所有android构建的参数，这里也是android dsl的入口点。\n- repositories：配置依赖管理的服务器，默认jcenter(),可以添加其他服务器，如MavenCenter().\n- dependencies 指具体依赖什么库，用classpath指明\n- 依赖jcenter服务器中的gradle库，包名：\"com.android.tools.build\",版本x.x.x\n\n<!-- more -->\n\n\t\tbuildscript {\n\t\t\trepositories {\n\t\t\t\tjcenter()\n\t\t\t}\n\t\t\tdependencies {\n\t\t\t\tclasspath 'com.android.tools.build:gradle:1.3.0'\n\t\t\t}\n\t\t}\n\n#### model中的build.gradle\n##### 基本配置说明\n- apply plugin:'com.android.application' ，表示添加插件，application标识这个Model为应用的主程序，如果Model为一个库，那么apply plugin:'com.android.library'\n- dependencies: 项目依赖，可以远程依赖，亦可以本地依赖。\n\n\t\tdependencies {\n\t\t    compile fileTree(dir: 'libs', include: ['*.jar'])\n\t\t    testCompile 'junit:junit:4.12'\n\t\t    compile 'com.android.support:appcompat-v7:23.1.0'\n\t\t    compile 'com.android.support:design:23.1.0'\n\t\t    compile project(':library')\n\t\t}\n\t\n\t- comple fileTree(dir: 'libs', include: ['*.jar'])表明编译时依赖libs文件下所有jar文件\n\t- compile project(':library')表明依赖本地名为library的Model库\n\t- compile 'com.android.support:design:23.1.0' 表明依赖远程库\n\n##### android{...}中的配置\n\tandroid {\n\t\tcomplieSdkVersion xx\n\t\tbuildToolsVersion xx\n\t\t\n\t\tdefaultConfig {\t\n\t\t}\n\t\t\n\t\tbuildTypes {\n\t\t}\n\t\t\n\t\tcompileOptions {\n\t\t}\n\t\t\n\t\tsourceSets {\n\t\t}\n\t\t\n\t\tlintOptions {\n\t\t}\n\t\t\n\t\tproductFlavors {\n\t\t\tflavors1 {\n\t\t\t}\n\t\t\tflavors1 {\n\t\t\t}\n\t\t}\n\t\t\n\t\tsigningConfigs {\n\t\t\trelease {\n\t\t\t\tstoreFile file(\"x.keystore\")\n\t\t\t\tstorePassword \"xxx\"\n\t\t\t\tkeyAlias \"xxx\"\n\t\t\t\tkeyPassword \"xxx\"\n\t\t\t}\n\t\t\tdebug {\n\t\t\t}\n\t\t}\n\t}\n- defaultConfig: 默认配置，相当于全局配置，buildType自动继承\n\n\t\t  defaultConfig {\n\t\t\t  applicationId \"com.xxx\"  (非必须配置，库类型的model无此配置)\n\t\t\t  minSdkVersion 14\n\t\t\t  targetSdkVersion 23\n\t\t\t  versionCode 1\n\t\t\t  versionName \"1.0\"\t\n\t\t  }\n- buildType：编译配置，有release 亦有debug,配置相同\n\n\t\t release {\n\t            buildConfigField \"boolean\", \"LOG_DEBUG\", \"false\"\n\t            minifyEnabled false\n\t            shrinkResources true\n\t            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'\n\t            signingConfig signingConfigs.release\n\t        }\n\t     debug {\n\t         \t  buildConfigField \"boolean\", \"LOG_DEBUG\", \"true\"\n\t            debuggable true\n\t            shrinkResources true\n\t            signingConfig signingConfigs.release\n\t        }\n\n- compileOptions：编译选项，进行java版本配置\n\n\t\tcompileOptions {\n\t\t\tsourceCompatibility JavaVersion.VERSION_1_7\n\t\t\ttargetCompatibility JavaVersion.VERSION_1_7\n\t\t}\n- sourceSets：源码设置，多为Ecipse中迁移过来的代码\n\n\t\tsourceSets {\n\t\t\tmain {\n\t\t\t\tmanifest.srcFile 'AndroidManifest.xml'\n\t\t\t\tjava.srcDirs = ['src']\n\t\t\t\tresource.srcDirs = ['src']\n\t\t\t\taidl.srcDirs = ['src']\n\t\t\t\trenderscript.srcDirs = ['src']\n\t\t\t\tres.srcDirs = ['res']\n\t\t\t\tassets.srcDirs = ['assets']\n\t\t\t\tjniLibs.srcDirs = ['libs']  （引用“.so”文件式的用法）\n\t\t\t}\n\t\t}\n\n- lintOptions：设置编译的lint开关。程序在build时执行lint检查，有错误则停止构建。设置abortOnError false 关掉\n- productFlavors：发布到不同渠道，且不同渠道中的包名不同，如下配置。也可以设置不同的AndroidManifest.xml文件。\n\t\n\t\tproductFlavors {\n\t\t\tflavor1 {\n\t\t\t\tpackageName='com.example.application1'\n\t\t\t\tmanifest.srcFile 'exampleapk/AndroidManifest1.xml'\n\t\t\t}\n\t\t\tflavor2 {\n\t\t\t\tpackageName='com.example.application2'\n\t\t\t\tmanifest.srcFile 'exampleapk/AndroidManifest2.xml'\n\t\t\t}\n\t\t}\n- signingConfigs——包签名的配置，可以配置具体的签名文件，签名密码等，可不用自己创建，点击build/generate signed apk，创建或选择签名文件，设置并记住密码。一般用读取配置文件的方式。\n\n\t\tProperties props = new Properties()\n\t\tprops.load(new FileInputStream(file(\"signing.properties\")))\n\t\t......\n\t\tsigningConfigs {\n\t        release {\n\t            keyAlias props['KEY_ALIAS']\n\t            keyPassword props['KEY_PASSWORD']\n\t            storeFile file(props['KEYSTORE_FILE'])\n\t            storePassword props['KEYSTORE_PASSWORD']\n\t        }\n\t    }","source":"_posts/android-gradle-summary.md","raw":"title: gradle在android中的用法概要\ndate: 2015-11-30 09:44:48\ntags: [gradle]\ncategories: [android]\ntoc: true\n---\n#### project中的build.gradle\n- buildscript: 配置驱动build的代码，声明在Maven中央仓库，取classpath dependency，即android plugin for gradle xxx\n- apply plugin：指明用到的plugin是android，就像在前面java程序中，用的plugin是java一样。\n- android{...} 中配置了所有android构建的参数，这里也是android dsl的入口点。\n- repositories：配置依赖管理的服务器，默认jcenter(),可以添加其他服务器，如MavenCenter().\n- dependencies 指具体依赖什么库，用classpath指明\n- 依赖jcenter服务器中的gradle库，包名：\"com.android.tools.build\",版本x.x.x\n\n<!-- more -->\n\n\t\tbuildscript {\n\t\t\trepositories {\n\t\t\t\tjcenter()\n\t\t\t}\n\t\t\tdependencies {\n\t\t\t\tclasspath 'com.android.tools.build:gradle:1.3.0'\n\t\t\t}\n\t\t}\n\n#### model中的build.gradle\n##### 基本配置说明\n- apply plugin:'com.android.application' ，表示添加插件，application标识这个Model为应用的主程序，如果Model为一个库，那么apply plugin:'com.android.library'\n- dependencies: 项目依赖，可以远程依赖，亦可以本地依赖。\n\n\t\tdependencies {\n\t\t    compile fileTree(dir: 'libs', include: ['*.jar'])\n\t\t    testCompile 'junit:junit:4.12'\n\t\t    compile 'com.android.support:appcompat-v7:23.1.0'\n\t\t    compile 'com.android.support:design:23.1.0'\n\t\t    compile project(':library')\n\t\t}\n\t\n\t- comple fileTree(dir: 'libs', include: ['*.jar'])表明编译时依赖libs文件下所有jar文件\n\t- compile project(':library')表明依赖本地名为library的Model库\n\t- compile 'com.android.support:design:23.1.0' 表明依赖远程库\n\n##### android{...}中的配置\n\tandroid {\n\t\tcomplieSdkVersion xx\n\t\tbuildToolsVersion xx\n\t\t\n\t\tdefaultConfig {\t\n\t\t}\n\t\t\n\t\tbuildTypes {\n\t\t}\n\t\t\n\t\tcompileOptions {\n\t\t}\n\t\t\n\t\tsourceSets {\n\t\t}\n\t\t\n\t\tlintOptions {\n\t\t}\n\t\t\n\t\tproductFlavors {\n\t\t\tflavors1 {\n\t\t\t}\n\t\t\tflavors1 {\n\t\t\t}\n\t\t}\n\t\t\n\t\tsigningConfigs {\n\t\t\trelease {\n\t\t\t\tstoreFile file(\"x.keystore\")\n\t\t\t\tstorePassword \"xxx\"\n\t\t\t\tkeyAlias \"xxx\"\n\t\t\t\tkeyPassword \"xxx\"\n\t\t\t}\n\t\t\tdebug {\n\t\t\t}\n\t\t}\n\t}\n- defaultConfig: 默认配置，相当于全局配置，buildType自动继承\n\n\t\t  defaultConfig {\n\t\t\t  applicationId \"com.xxx\"  (非必须配置，库类型的model无此配置)\n\t\t\t  minSdkVersion 14\n\t\t\t  targetSdkVersion 23\n\t\t\t  versionCode 1\n\t\t\t  versionName \"1.0\"\t\n\t\t  }\n- buildType：编译配置，有release 亦有debug,配置相同\n\n\t\t release {\n\t            buildConfigField \"boolean\", \"LOG_DEBUG\", \"false\"\n\t            minifyEnabled false\n\t            shrinkResources true\n\t            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'\n\t            signingConfig signingConfigs.release\n\t        }\n\t     debug {\n\t         \t  buildConfigField \"boolean\", \"LOG_DEBUG\", \"true\"\n\t            debuggable true\n\t            shrinkResources true\n\t            signingConfig signingConfigs.release\n\t        }\n\n- compileOptions：编译选项，进行java版本配置\n\n\t\tcompileOptions {\n\t\t\tsourceCompatibility JavaVersion.VERSION_1_7\n\t\t\ttargetCompatibility JavaVersion.VERSION_1_7\n\t\t}\n- sourceSets：源码设置，多为Ecipse中迁移过来的代码\n\n\t\tsourceSets {\n\t\t\tmain {\n\t\t\t\tmanifest.srcFile 'AndroidManifest.xml'\n\t\t\t\tjava.srcDirs = ['src']\n\t\t\t\tresource.srcDirs = ['src']\n\t\t\t\taidl.srcDirs = ['src']\n\t\t\t\trenderscript.srcDirs = ['src']\n\t\t\t\tres.srcDirs = ['res']\n\t\t\t\tassets.srcDirs = ['assets']\n\t\t\t\tjniLibs.srcDirs = ['libs']  （引用“.so”文件式的用法）\n\t\t\t}\n\t\t}\n\n- lintOptions：设置编译的lint开关。程序在build时执行lint检查，有错误则停止构建。设置abortOnError false 关掉\n- productFlavors：发布到不同渠道，且不同渠道中的包名不同，如下配置。也可以设置不同的AndroidManifest.xml文件。\n\t\n\t\tproductFlavors {\n\t\t\tflavor1 {\n\t\t\t\tpackageName='com.example.application1'\n\t\t\t\tmanifest.srcFile 'exampleapk/AndroidManifest1.xml'\n\t\t\t}\n\t\t\tflavor2 {\n\t\t\t\tpackageName='com.example.application2'\n\t\t\t\tmanifest.srcFile 'exampleapk/AndroidManifest2.xml'\n\t\t\t}\n\t\t}\n- signingConfigs——包签名的配置，可以配置具体的签名文件，签名密码等，可不用自己创建，点击build/generate signed apk，创建或选择签名文件，设置并记住密码。一般用读取配置文件的方式。\n\n\t\tProperties props = new Properties()\n\t\tprops.load(new FileInputStream(file(\"signing.properties\")))\n\t\t......\n\t\tsigningConfigs {\n\t        release {\n\t            keyAlias props['KEY_ALIAS']\n\t            keyPassword props['KEY_PASSWORD']\n\t            storeFile file(props['KEYSTORE_FILE'])\n\t            storePassword props['KEYSTORE_PASSWORD']\n\t        }\n\t    }","slug":"android-gradle-summary","published":1,"updated":"2015-11-30T06:51:53.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cil3kd60v000in86keg0rlaph"}],"PostAsset":[],"PostCategory":[{"post_id":"cil3kd5zs0000n86k7twsxty5","category_id":"cil3kd5zx0001n86k6djjj2c8","_id":"cil3kd6010004n86kqwmylgxb"},{"post_id":"cil3kd60e0008n86klpciczx2","category_id":"cil3kd60h0009n86kong17boc","_id":"cil3kd60o000cn86kzs55if3r"},{"post_id":"cil3kd60q000dn86k6q9jb7j8","category_id":"cil3kd60s000en86ksjdnwrtx","_id":"cil3kd60t000hn86k9tp0ilip"},{"post_id":"cil3kd60v000in86keg0rlaph","category_id":"cil3kd60h0009n86kong17boc","_id":"cil3kd60v000jn86kctx5bko7"}],"PostTag":[{"post_id":"cil3kd5zs0000n86k7twsxty5","tag_id":"cil3kd5zx0002n86k81m07vvh","_id":"cil3kd6010003n86k2qlcihb4"},{"post_id":"cil3kd60e0008n86klpciczx2","tag_id":"cil3kd60h000an86kb57llww4","_id":"cil3kd60o000bn86k0enm10sy"},{"post_id":"cil3kd60q000dn86k6q9jb7j8","tag_id":"cil3kd60s000fn86kwto8j2sp","_id":"cil3kd60s000gn86kr48b8u5k"},{"post_id":"cil3kd60v000in86keg0rlaph","tag_id":"cil3kd60w000kn86kshrgcqbd","_id":"cil3kd60w000ln86kazsk9nni"}],"Tag":[{"name":"开发文档","_id":"cil3kd5zx0002n86k81m07vvh"},{"name":"android","_id":"cil3kd60h000an86kb57llww4"},{"name":"MVP","_id":"cil3kd60s000fn86kwto8j2sp"},{"name":"gradle","_id":"cil3kd60w000kn86kshrgcqbd"}]}}